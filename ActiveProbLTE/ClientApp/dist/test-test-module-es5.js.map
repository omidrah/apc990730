{"version":3,"sources":["webpack:///./src/app/test/definedTest/definedTest.component.html","webpack:///./src/app/test/definedTestEdit/definedTestEdit.component.html","webpack:///./src/app/test/definedTestGroupAssignment/definedTestGroupAssignment.component.html","webpack:///./src/app/test/definedTestGroupAssignmentEdit/definedTestGroupAssignmentEdit.component.html","webpack:///./src/app/test/definedTestMachineAssignment/definedTestMachineAssignment.component.html","webpack:///./src/app/test/definedTestMachineAssignmentEdit/definedTestMachineAssignmentEdit.component.html","webpack:///./src/app/test/definedTest/definedTest.component.css","webpack:///./src/app/test/definedTest/definedTest.component.ts","webpack:///./src/app/test/definedTestEdit/definedTestEdit.component.css","webpack:///./src/app/test/definedTestEdit/definedTestEdit.component.ts","webpack:///./src/app/test/definedTestGroupAssignment/definedTestGroupAssignment.component.css","webpack:///./src/app/test/definedTestGroupAssignment/definedTestGroupAssignment.component.ts","webpack:///./src/app/test/definedTestGroupAssignmentEdit/definedTestGroupAssignmentEdit.component.css","webpack:///./src/app/test/definedTestGroupAssignmentEdit/definedTestGroupAssignmentEdit.component.ts","webpack:///./src/app/test/definedTestMachineAssignment/definedTestMachineAssignment.component.css","webpack:///./src/app/test/definedTestMachineAssignment/definedTestMachineAssignment.component.ts","webpack:///./src/app/test/definedTestMachineAssignmentEdit/definedTestMachineAssignmentEdit.component.css","webpack:///./src/app/test/definedTestMachineAssignmentEdit/definedTestMachineAssignmentEdit.component.ts","webpack:///./src/app/test/test-routing.module.ts","webpack:///./src/app/test/test.module.ts"],"names":[],"mappings":"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","file":"test-test-module-es5.js","sourcesContent":["module.exports = \"<!-- Content Wrapper. Contains page content -->\\r\\n<div class=\\\"content-wrapper\\\">\\r\\n  <!-- Content Header (Page header) -->\\r\\n\\r\\n  <section class=\\\"content-header\\\">\\r\\n    <h1>\\r\\n      <span translate>TestList</span>\\r\\n    </h1>\\r\\n    <ol class=\\\"breadcrumb\\\">\\r\\n      <li><a [routerLink]=\\\"['']\\\" translate><i class=\\\"fa fa-dashboard\\\"></i>Home</a></li>\\r\\n      <li class=\\\"active\\\"><span translate>TestList</span></li>\\r\\n    </ol>\\r\\n  </section>\\r\\n\\r\\n  <!--<app-breadcrumb></app-breadcrumb>-->\\r\\n  <!-- Main content -->\\r\\n  <section class=\\\"content\\\">\\r\\n\\r\\n    <!--------------------------\\r\\n    | Your Page Content Here |\\r\\n    -------------------------->\\r\\n\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-xs-12\\\">\\r\\n        <div class=\\\"box box-primary\\\">\\r\\n          <div class=\\\"box-body\\\">\\r\\n\\r\\n            <div class=\\\"row\\\">\\r\\n              <div class=\\\"col-md-12\\\">\\r\\n                <mat-form-field>\\r\\n                  <mat-label translate>Search</mat-label>\\r\\n                  <input matInput (keyup)=\\\"applyFilter($event)\\\" #input>\\r\\n                </mat-form-field>\\r\\n                <a class=\\\"btn btn-success btn-lg rowEndAligne\\\" [routerLink]=\\\"['/Test/Create']\\\"><span translate>CreateTest</span><i class=\\\"fa fa-plus\\\"></i></a>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"mat-table-container mat-elevation-z8\\\">\\r\\n              <table mat-table [dataSource]=\\\"dataSource\\\" matSort class=\\\"table table-hover table-striped text-nowrap\\\">\\r\\n\\r\\n                <!--- Note that these columns can be defined in any order.\\r\\n                The actual rendered columns are set as a property on the row definition\\\" -->\\r\\n\\r\\n                <ng-container matColumnDef=\\\"index\\\">\\r\\n                  <th mat-header-cell *matHeaderCellDef><span translate>Row</span></th>\\r\\n                  <td mat-cell *matCellDef=\\\"let element;let i = index;\\\">\\r\\n                    {{this.paginator.pageIndex == 0 ? i + 1 : 1 + i + this.paginator.pageIndex * this.paginator.pageSize}}\\r\\n                  </td>\\r\\n                </ng-container>\\r\\n\\r\\n                <ng-container matColumnDef=\\\"title\\\">\\r\\n                  <th mat-header-cell *matHeaderCellDef mat-sort-header><span translate>Title</span></th>\\r\\n                  <td mat-cell *matCellDef=\\\"let element\\\"> {{element.title}} </td>\\r\\n                </ng-container>\\r\\n\\r\\n                <ng-container matColumnDef=\\\"layer3Messages\\\">\\r\\n                  <th mat-header-cell *matHeaderCellDef mat-sort-header><span translate>Layer3Messages</span></th>\\r\\n                  <td mat-cell *matCellDef=\\\"let element\\\">\\r\\n                    <i title=\\\"{{ (element.layer3Messages==true ? 'Yse' : 'No' ) | translate }}\\\" class=\\\"fa fa-2x\\\" [ngClass]=\\\" { 'fa-minus-circle text-red': !element.layer3Messages , 'fa-check-circle text-green': element.layer3Messages==true} \\\"></i>\\r\\n                  </td>\\r\\n                </ng-container>\\r\\n\\r\\n                <ng-container matColumnDef=\\\"repeatTime\\\">\\r\\n                  <th mat-header-cell *matHeaderCellDef><span translate>RepeatTime</span></th>\\r\\n                  <td mat-cell *matCellDef=\\\"let element\\\"> {{element.repeatTime}} </td>\\r\\n                </ng-container>\\r\\n\\r\\n                <ng-container matColumnDef=\\\"repeatCount\\\">\\r\\n                  <th mat-header-cell *matHeaderCellDef><span translate>RepeatCount</span></th>\\r\\n                  <td mat-cell *matCellDef=\\\"let element\\\"> {{element.repeatCount}} </td>\\r\\n                </ng-container>\\r\\n\\r\\n                <ng-container matColumnDef=\\\"measurementInterval\\\">\\r\\n                  <th mat-header-cell *matHeaderCellDef mat-sort-header><span translate>MeasurementInterval</span></th>\\r\\n                  <td mat-cell *matCellDef=\\\"let element\\\"> {{element.measurementInterval}} </td>\\r\\n                </ng-container>\\r\\n\\r\\n                <ng-container matColumnDef=\\\"testTypeTitle\\\">\\r\\n                  <th mat-header-cell *matHeaderCellDef mat-sort-header><span translate>TestTypeTitle</span></th>\\r\\n                  <td mat-cell *matCellDef=\\\"let element\\\"> {{element.testTypeTitle}} </td>\\r\\n                </ng-container>\\r\\n\\r\\n                <ng-container matColumnDef=\\\"networkTitle\\\">\\r\\n                  <th mat-header-cell *matHeaderCellDef mat-sort-header><span translate>NetworkTitle</span></th>\\r\\n                  <td mat-cell *matCellDef=\\\"let element\\\"> {{element.networkTitle}}</td>\\r\\n                </ng-container>\\r\\n\\r\\n                <ng-container matColumnDef=\\\"bandTitle\\\">\\r\\n                  <th mat-header-cell *matHeaderCellDef><span translate>BandTitle</span></th>\\r\\n                  <td mat-cell *matCellDef=\\\"let element\\\"> {{element.bandTitle}} </td>\\r\\n                </ng-container>\\r\\n\\r\\n                <ng-container matColumnDef=\\\"saveLogFile\\\">\\r\\n                  <th mat-header-cell *matHeaderCellDef mat-sort-header><span translate>SaveLogFile</span></th>\\r\\n                  <td mat-cell *matCellDef=\\\"let element\\\">\\r\\n                    <i title=\\\"{{ (element.saveLogFile==true ? 'Yse' : 'No' ) | translate }}\\\" class=\\\"fa fa-2x\\\"\\r\\n                       [ngClass]=\\\"{'fa-minus-circle text-red': element.saveLogFile==false , 'fa-check-circle text-green': element.saveLogFile==true} \\\"></i>\\r\\n                  </td>\\r\\n                </ng-container>\\r\\n\\r\\n                <ng-container matColumnDef=\\\"actions\\\" sticky [stickyEnd]=\\\"true\\\">\\r\\n                  <th mat-header-cell *matHeaderCellDef></th>\\r\\n                  <td mat-cell *matCellDef=\\\"let element\\\">\\r\\n                    <a class=\\\"btn btn-default gridbutton\\\" [class.disabled]=\\\"element.editable\\\" [routerLink]=\\\"['/Test/edit/' , element.id]\\\" title=\\\"{{ 'Edit' | translate }}\\\"><i class=\\\"fa fa-edit\\\"></i></a>\\r\\n                    <a class=\\\"btn btn-default gridbutton\\\" [class.disabled]=\\\"element.editable\\\" (click)=\\\"deleteTest(element.id,element.title)\\\" title=\\\"{{ 'Delete' | translate }}\\\" data-toggle=\\\"modal\\\" data-target=\\\"#modal-default\\\"><i class=\\\"fa fa-trash\\\"></i></a>\\r\\n                  </td>\\r\\n                </ng-container>\\r\\n\\r\\n                <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n                <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n              </table>\\r\\n              <mat-paginator [pageSize]=\\\"10\\\" [pageSizeOptions]=\\\"[10 , 25 , 50 , 100]\\\" [showFirstLastButtons]=\\\"true\\\"></mat-paginator>\\r\\n\\r\\n            </div>\\r\\n\\r\\n          </div><!-- /.box-body -->\\r\\n          <div class=\\\"overlay\\\" *ngIf=\\\"showloader\\\">\\r\\n            <i class=\\\"fa fa-refresh fa-spin\\\"></i>\\r\\n          </div>\\r\\n        </div><!-- /.box -->\\r\\n      </div><!-- /.col -->\\r\\n    </div><!-- /.row -->\\r\\n\\r\\n    <div class=\\\"modal fade\\\" id=\\\"modal-default\\\" data-backdrop=\\\"static\\\" style=\\\"display: none;\\\">\\r\\n      <div class=\\\"modal-dialog\\\">\\r\\n        <div class=\\\"modal-content\\\">\\r\\n          <div class=\\\"modal-header\\\">\\r\\n            <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-label=\\\"Close\\\">\\r\\n              <span aria-hidden=\\\"true\\\">×</span>\\r\\n            </button>\\r\\n            <h4 class=\\\"modal-title\\\" translate>Noticeable</h4>\\r\\n          </div>\\r\\n          <div class=\\\"modal-body\\\">\\r\\n            <p translate>DeleteTestConfirmMessage</p>\\r\\n          </div>\\r\\n          <div class=\\\"modal-footer\\\">\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-default pull-left\\\" data-dismiss=\\\"modal\\\" translate>No</button>\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"doDelete()\\\" translate>Yse</button>\\r\\n          </div>\\r\\n        </div>\\r\\n        <!-- /.modal-content -->\\r\\n      </div>\\r\\n      <!-- /.modal-dialog -->\\r\\n    </div>\\r\\n\\r\\n  </section>\\r\\n  <!-- /.content -->\\r\\n</div>\\r\\n<!-- /.content-wrapper -->\\r\\n\"","module.exports = \"<!-- Content Wrapper. Contains page content -->\\r\\n<div class=\\\"content-wrapper\\\">\\r\\n  <!-- Content Header (Page header) -->\\r\\n\\r\\n  <section class=\\\"content-header\\\">\\r\\n    <h1>\\r\\n      {{breadcroumb | translate}}\\r\\n      <small>{{testTitle }}</small>\\r\\n    </h1>\\r\\n\\r\\n    <ol class=\\\"breadcrumb\\\">\\r\\n      <li><a [routerLink]=\\\"['']\\\" translate><i class=\\\"fa fa-dashboard\\\"></i>Home</a></li>\\r\\n      <li><a [routerLink]=\\\"['/Test']\\\"><span translate>TestList</span></a></li>\\r\\n      <li class=\\\"active\\\">{{breadcroumb | translate}} {{ testTitle }}</li>\\r\\n    </ol>\\r\\n  </section>\\r\\n\\r\\n  <!--<app-breadcrumb></app-breadcrumb>-->\\r\\n  <!-- Main content -->\\r\\n  <section class=\\\"content\\\">\\r\\n\\r\\n    <div class=\\\"row\\\">\\r\\n\\r\\n      <div class=\\\"col-md-12\\\">\\r\\n        <!-- Horizontal Form -->\\r\\n        <div class=\\\"box box-primary\\\">\\r\\n\\r\\n\\r\\n          <form class=\\\"form-horizontal\\\" [formGroup]=\\\"definedTestForm\\\" (ngSubmit)=\\\"save()\\\" #formDir=\\\"ngForm\\\" novalidate>\\r\\n            <div class=\\\"box-body\\\">\\r\\n              <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-lg-6\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"inputName\\\" class=\\\"col-sm-3 control-label\\\">\\r\\n                      <span class=\\\"text-red\\\">* </span>\\r\\n                      <span translate>Title</span>:\\r\\n                    </label>\\r\\n                    <div class=\\\"col-sm-9\\\">\\r\\n                      <input class=\\\"form-control\\\" placeholder=\\\"Title\\\" type=\\\"text\\\" formControlName=\\\"title\\\" required>\\r\\n                      <span class=\\\"text-danger col-md-12\\\" *ngIf=\\\"title?.invalid &&  title.errors.required  && ( title.touched || formDir.submitted)\\\" translate>TitleIsRequired</span>\\r\\n                      <span *ngIf=\\\"title?.invalid && title.errors.titleExist   && ( title.touched || formDir.submitted)\\\" class=\\\"text-danger col-md-12\\\" translate>TitleIsDuplicate</span>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n                <div class=\\\"col-lg-6\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"inputSerialNo\\\" class=\\\"col-sm-3 control-label\\\"><span translate>Layer3Messages</span>:</label>\\r\\n                    <div class=\\\"col-sm-9\\\">\\r\\n                      <div class=\\\"checkbox\\\">\\r\\n                        <label>\\r\\n                          <input type=\\\"checkbox\\\" formControlName=\\\"layer3Messages\\\">\\r\\n                        </label>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n              <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-lg-6\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"inputName\\\" class=\\\"col-sm-3 control-label\\\">\\r\\n                      <span class=\\\"text-red\\\">* </span>\\r\\n                      <span translate>RepeatType</span>:\\r\\n                    </label>\\r\\n                    <div class=\\\"col-sm-9\\\">\\r\\n                      <select class=\\\"form-control\\\" data-val=\\\"true\\\" formControlName=\\\"repeatTypeId\\\" [(ngModel)]=\\\"repeatTypeOptionValue\\\">\\r\\n                        <option value=-1 translate>SelectRepeatTypePlease</option>\\r\\n                        <option *ngFor=\\\"let type of repeatTypeList\\\" [ngValue]=type.id>\\r\\n                          {{type.title}}\\r\\n                        </option>\\r\\n                      </select>\\r\\n                      <span class=\\\"text-danger col-md-12\\\" *ngIf=\\\"repeatTypeId?.invalid   && ( repeatTypeId.touched || formDir.submitted)\\\" translate>RepeatTypeIsRequired</span>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n              <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-lg-6\\\" *ngIf=\\\"repeatTypeOptionValue==2\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"inputName\\\" class=\\\"col-sm-3 control-label\\\">\\r\\n                      <span class=\\\"text-red\\\">* </span>\\r\\n                      <span translate>RepeatTime</span>:\\r\\n                    </label>\\r\\n                    <div class=\\\"col-sm-9\\\">\\r\\n                      <input class=\\\"form-control\\\" type=\\\"number\\\" formControlName=\\\"repeatTime\\\">\\r\\n                      <span class=\\\"text-danger col-md-12\\\" *ngIf=\\\"repeatTime?.invalid   && ( repeatTime.touched || formDir.submitted)\\\" translate>RepeatTimeIsRequired</span>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n                <div class=\\\"col-lg-6\\\" *ngIf=\\\"repeatTypeOptionValue==3\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"inputSerialNo\\\" class=\\\"col-sm-3 control-label\\\"><span translate>RepeatCount</span>:</label>\\r\\n                    <div class=\\\"col-sm-9\\\">\\r\\n                      <input class=\\\"form-control\\\" type=\\\"number\\\" formControlName=\\\"repeatCount\\\">\\r\\n                      <span class=\\\"text-danger col-md-12\\\" *ngIf=\\\"repeatCount?.invalid   && ( repeatCount.touched || formDir.submitted)\\\" translate>RepeatCountIsRequired</span>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n              <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-lg-6\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"inputName\\\" class=\\\"col-sm-3 control-label\\\">\\r\\n                      <span class=\\\"text-red\\\">* </span>\\r\\n                      <span translate>TestTypeTitle</span>:\\r\\n                    </label>\\r\\n                    <div class=\\\"col-sm-9\\\">\\r\\n                      <select class=\\\"form-control\\\" data-val=\\\"true\\\" formControlName=\\\"testTypeId\\\"\\r\\n                              [(ngModel)]=\\\"testTypeIdOptionValue\\\" (change)='onTestTypeOptionsSelected($event)'>\\r\\n                        <option value=\\\"0\\\" translate>SelectTestPlease</option>\\r\\n                        <option *ngFor=\\\"let type of testTypeList\\\" [ngValue]=type.id>\\r\\n                          {{type.title}}\\r\\n                        </option>\\r\\n                      </select>\\r\\n                      <span class=\\\"text-danger col-md-12\\\" *ngIf=\\\"testTypeId?.invalid   && ( testTypeId.touched || formDir.submitted)\\\" translate>TestTypeIsRequired</span>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n                <div class=\\\"col-lg-6\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"inputSerialNo\\\" class=\\\"col-sm-3 control-label\\\">\\r\\n                      <span class=\\\"text-red\\\">* </span>\\r\\n                      <span translate>MeasurementIntervalLable</span>:\\r\\n                    </label>\\r\\n                    <div class=\\\"col-sm-9\\\">\\r\\n                      <input class=\\\"form-control\\\" type=\\\"number\\\" formControlName=\\\"measurementInterval\\\">\\r\\n                      <span class=\\\"text-danger col-md-12\\\" *ngIf=\\\"measurementInterval?.invalid   && ( measurementInterval.touched || measurementInterval.dirty || formDir.submitted)\\\" translate>MeasurementIntervalIsInvalid</span>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n              <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-lg-6\\\" *ngIf=\\\"testTypeIdOptionValue==1 || testTypeIdOptionValue==2 \\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"inputName\\\" class=\\\"col-sm-3 control-label\\\">\\r\\n                      <span class=\\\"text-red\\\">* </span>\\r\\n                      <span translate>UsualCallDuration</span>:\\r\\n                    </label>\\r\\n                    <div class=\\\"col-sm-9\\\">\\r\\n                      <input class=\\\"form-control\\\" type=\\\"number\\\" formControlName=\\\"usualCallDuration\\\">\\r\\n                      <span class=\\\"text-danger col-md-12\\\" *ngIf=\\\"usualCallDuration.invalid   && ( usualCallDuration.touched || usualCallDuration.dirty  || formDir.submitted)\\\" translate>UsualCallDurationIsInvalid</span>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n                <div class=\\\"col-lg-6\\\" *ngIf=\\\"testTypeIdOptionValue==1 || testTypeIdOptionValue==2\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"inputSerialNo\\\" class=\\\"col-sm-3 control-label\\\">\\r\\n                      <span class=\\\"text-red\\\">* </span>\\r\\n                      <span translate>UsualCallWaitTime</span>:\\r\\n                    </label>\\r\\n                    <div class=\\\"col-sm-9\\\">\\r\\n                      <input class=\\\"form-control\\\" type=\\\"number\\\" formControlName=\\\"usualCallWaitTime\\\">\\r\\n                      <span class=\\\"text-danger col-md-12\\\" *ngIf=\\\"usualCallWaitTime.invalid   && ( usualCallWaitTime.touched || usualCallWaitTime.dirty  || formDir.submitted)\\\" translate>UsualCallWaitTimeIsInvalid</span>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n              <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-lg-6\\\" *ngIf=\\\"testTypeIdOptionValue==4\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"inputName\\\" class=\\\"col-sm-3 control-label\\\">\\r\\n                      <span class=\\\"text-red\\\">* </span>\\r\\n                      <span translate>TestDataProtocol</span>:\\r\\n                    </label>\\r\\n                    <div class=\\\"col-sm-9\\\">\\r\\n                      <select class=\\\"form-control\\\" type=\\\"text\\\" data-val=\\\"true\\\" formControlName=\\\"testDataId\\\"\\r\\n                              (change)='onOptionsSelected($event)'>\\r\\n                        <option value=-1 translate>SelectTestDataProtocolPlease</option>\\r\\n                        <option *ngFor=\\\"let type of testDataList\\\" [(ngValue)]=\\\"type.id\\\">\\r\\n                          {{type.title}}\\r\\n                        </option>\\r\\n                      </select>\\r\\n                      <span class=\\\"text-danger col-md-12\\\" *ngIf=\\\"testDataId?.invalid   && ( testDataId.touched || formDir.submitted)\\\" translate>TestDataProtocolIsRequired</span>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n                <div class=\\\"col-lg-6\\\" *ngIf=\\\"(testTypeIdOptionValue==2) || (testTypeIdOptionValue==4 && (testDataIdOptionValue == 1 || testDataIdOptionValue == 2) )\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"inputSerialNo\\\" class=\\\"col-sm-3 control-label\\\">\\r\\n                      <span class=\\\"text-red\\\">* </span>\\r\\n                      <span translate>TestDataType</span>:\\r\\n                    </label>\\r\\n                    <div class=\\\"col-sm-9\\\">\\r\\n                      <select class=\\\"form-control\\\" data-val=\\\"true\\\" formControlName=\\\"testDataTypeId\\\" (change)='onDirectionSelected($event)'>\\r\\n                        <option value=0 translate>SelectTestDataTypePlease</option>\\r\\n                        <option *ngFor=\\\"let type of testDataTypeList\\\" [ngValue]=type.id>\\r\\n                          {{type.title}}\\r\\n                        </option>\\r\\n                      </select>\\r\\n                      <span class=\\\"text-danger col-md-12\\\" *ngIf=\\\"testDataTypeId?.invalid   && ( testDataTypeId.touched || formDir.submitted)\\\" translate>TestDataTypeIsRequired</span>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n              <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-lg-6\\\" *ngIf=\\\"testTypeIdOptionValue==4 || testTypeIdOptionValue==2\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"inputName\\\" class=\\\"col-sm-3 control-label\\\">\\r\\n                      <span class=\\\"text-red\\\">* </span>\\r\\n                      <span translate>TestDataServer</span>:\\r\\n                    </label>\\r\\n                    <div class=\\\"col-sm-9\\\">\\r\\n                      <input class=\\\"form-control\\\" type=\\\"url\\\" formControlName=\\\"testDataServer\\\">\\r\\n                      <span class=\\\"text-danger col-md-12\\\" *ngIf=\\\" testDataServer?.invalid   && ( testDataServer.touched  || testDataServer.dirty || formDir.submitted) \\\" translate>TestDataServerIsRequired</span>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n                <div class=\\\"col-lg-6\\\" *ngIf=\\\"testTypeIdOptionValue==4 && testDataIdOptionValue == 1\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"inputSerialNo\\\" class=\\\"col-sm-3 control-label\\\">\\r\\n                      <span class=\\\"text-red\\\">* </span>\\r\\n                      <span translate>TestDataUserName</span>:\\r\\n                    </label>\\r\\n                    <div class=\\\"col-sm-9\\\">\\r\\n                      <input class=\\\"form-control\\\" type=\\\"text\\\" formControlName=\\\"testDataUserName\\\">\\r\\n                      <span class=\\\"text-danger col-md-12\\\" *ngIf=\\\"testDataUserName?.invalid   && ( testDataUserName.touched  || testDataUserName.dirty || formDir.submitted)\\\" translate>TestDataUserNameIsRequired</span>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n              <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-lg-6\\\" *ngIf=\\\"testTypeIdOptionValue==4 && testDataIdOptionValue == 4\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"inputName\\\" class=\\\"col-sm-3 control-label\\\">\\r\\n                      <span class=\\\"text-red\\\">* </span>\\r\\n                      <span translate>TraceRouteHubCount</span>:\\r\\n                    </label>\\r\\n                    <div class=\\\"col-sm-9\\\">\\r\\n                      <input class=\\\"form-control\\\" type=\\\"number\\\" formControlName=\\\"traceRouteHubCount\\\">\\r\\n                      <span class=\\\"text-danger col-md-12\\\" *ngIf=\\\"TraceRouteHubCount?.invalid   && ( TraceRouteHubCount.touched  || TraceRouteHubCount.dirty || formDir.submitted)\\\" translate>TraceRouteHubIsRequired</span>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n              <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-lg-6\\\" *ngIf=\\\"testTypeIdOptionValue==4 && testDataIdOptionValue == 3\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"inputName\\\" class=\\\"col-sm-3 control-label\\\">\\r\\n                      <span class=\\\"text-red\\\">* </span>\\r\\n                      <span translate>PingCount</span>:\\r\\n                    </label>\\r\\n                    <div class=\\\"col-sm-9\\\">\\r\\n                      <input class=\\\"form-control\\\" type=\\\"number\\\" formControlName=\\\"numberOfPings\\\">\\r\\n                      <span class=\\\"text-danger col-md-12\\\" *ngIf=\\\"numberOfPings?.invalid   && ( numberOfPings.touched  || numberOfPings.dirty || formDir.submitted)\\\" translate>NumberOfPingsIsInvalid</span>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n                <div class=\\\"col-lg-6\\\" *ngIf=\\\"testTypeIdOptionValue==4 && testDataIdOptionValue == 3\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"inputSerialNo\\\" class=\\\"col-sm-3 control-label\\\">\\r\\n                      <span class=\\\"text-red\\\">* </span>\\r\\n                      <span translate>PacketSize</span>:\\r\\n                    </label>\\r\\n                    <div class=\\\"col-sm-9\\\">\\r\\n                      <input class=\\\"form-control\\\" type=\\\"number\\\" formControlName=\\\"packetSize\\\">\\r\\n                      <span class=\\\"text-danger col-md-12\\\" *ngIf=\\\"packetSize?.invalid   && ( packetSize.touched  || packetSize.dirty || formDir.submitted)\\\" translate>PacketSizeIsInvalid</span>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n              <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-lg-6\\\" *ngIf=\\\"testTypeIdOptionValue==4 && testDataIdOptionValue == 3\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"inputName\\\" class=\\\"col-sm-3 control-label\\\">\\r\\n                      <span class=\\\"text-red\\\">* </span>\\r\\n                      <span translate>IntervalTime</span>:\\r\\n                    </label>\\r\\n                    <div class=\\\"col-sm-9\\\">\\r\\n                      <input class=\\\"form-control\\\" type=\\\"number\\\" formControlName=\\\"internalTime\\\">\\r\\n                      <span class=\\\"text-danger col-md-12\\\" *ngIf=\\\"internalTime?.invalid   && ( internalTime.touched  || internalTime.dirty || formDir.submitted)\\\" translate>InternalTimeIsInvalid</span>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n                <div class=\\\"col-lg-6\\\" *ngIf=\\\"testTypeIdOptionValue==4 && testDataIdOptionValue == 3\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"inputSerialNo\\\" class=\\\"col-sm-3 control-label\\\">\\r\\n                      <span class=\\\"text-red\\\">* </span>\\r\\n                      <span translate>ResponseWaitTime</span>:\\r\\n                    </label>\\r\\n                    <div class=\\\"col-sm-9\\\">\\r\\n                      <input class=\\\"form-control\\\" type=\\\"number\\\" formControlName=\\\"responseWaitTime\\\">\\r\\n                      <span class=\\\"text-danger col-md-12\\\" *ngIf=\\\"responseWaitTime?.invalid   && ( responseWaitTime.touched  || responseWaitTime.dirty || formDir.submitted)\\\" translate>ResponseWaitTimeIsInvalid</span>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n              <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-lg-6\\\" *ngIf=\\\"testTypeIdOptionValue==4 && testDataIdOptionValue == 3\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"inputName\\\" class=\\\"col-sm-3 control-label\\\">\\r\\n                      <span class=\\\"text-red\\\">* </span>\\r\\n                      <span translate>TTL</span>:\\r\\n                    </label>\\r\\n                    <div class=\\\"col-sm-9\\\">\\r\\n                      <input class=\\\"form-control\\\" type=\\\"number\\\" formControlName=\\\"ttl\\\">\\r\\n                      <span class=\\\"text-danger col-md-12\\\" *ngIf=\\\"ttl?.invalid   && ( ttl.touched || ttl.dirty|| formDir.submitted)\\\" translate>TTLIsInvalid</span>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n                <div class=\\\"col-lg-6\\\" *ngIf=\\\"testTypeIdOptionValue==4 && testDataIdOptionValue == 3\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"inputSerialNo\\\" class=\\\"col-sm-3 control-label\\\">\\r\\n                      <span class=\\\"text-red\\\">* </span>\\r\\n                      <span translate>IpType</span>:\\r\\n                    </label>\\r\\n                    <div class=\\\"col-sm-9\\\">\\r\\n                      <select class=\\\"form-control\\\" data-val=\\\"true\\\" formControlName=\\\"ipTypeId\\\" [(ngModel)]=\\\"iPTypeIdOptionValue\\\">\\r\\n                        <option value=-1 translate>SelectIpTypePlease</option>\\r\\n                        <option *ngFor=\\\"let type of iPTypeList\\\" [ngValue]=type.id>\\r\\n                          {{type.title}}\\r\\n                        </option>\\r\\n                      </select>\\r\\n                      <span class=\\\"text-danger col-md-12\\\" *ngIf=\\\"ipTypeId?.invalid   && ( ipTypeId.touched || formDir.submitted)\\\" translate>IpTypeIsRequired</span>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n              <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-lg-6\\\" *ngIf=\\\"testTypeIdOptionValue==4 && testDataIdOptionValue == 1\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"inputName\\\" class=\\\"col-sm-3 control-label\\\">\\r\\n                      <span class=\\\"text-red\\\">* </span>\\r\\n                      <span translate>TestDataPassword</span>:\\r\\n                    </label>\\r\\n                    <div class=\\\"col-sm-9\\\">\\r\\n                      <input class=\\\"form-control\\\" type=\\\"text\\\" formControlName=\\\"testDataPassword\\\">\\r\\n                      <span class=\\\"text-danger col-md-12\\\" *ngIf=\\\"testDataPassword?.invalid   && ( testDataPassword.touched  || testDataPassword.dirty || formDir.submitted)\\\" translate>TestDataPasswordIsRequired</span>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n                <div class=\\\"col-lg-6\\\" *ngIf=\\\"testTypeIdOptionValue==2 || (testTypeIdOptionValue==4 && (testDataIdOptionValue == 1 || testDataIdOptionValue == 2 ))\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"inputSerialNo\\\" class=\\\"col-sm-3 control-label\\\">\\r\\n                      <span translate>FileAddress</span>:\\r\\n                    </label>\\r\\n                    <div class=\\\"col-sm-9\\\">\\r\\n                      <input class=\\\"form-control\\\" type=\\\"text\\\" formControlName=\\\"testDataDownloadFileAddress\\\">\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n              <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-lg-6\\\" *ngIf=\\\"testTypeIdOptionValue==4 && (testDataIdOptionValue == 1 || testDataIdOptionValue == 2) && testDataDirectionIdOptionValue == 2\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"inputName\\\" class=\\\"col-sm-3 control-label\\\">\\r\\n                      <span class=\\\"text-red\\\">* </span>\\r\\n                      <span translate>TestDataUploadFileSize</span>:\\r\\n                    </label>\\r\\n                    <div class=\\\"col-sm-9\\\">\\r\\n                      <input class=\\\"form-control\\\" type=\\\"number\\\" formControlName=\\\"testDataUploadFileSize\\\">\\r\\n                      <span class=\\\"text-danger col-md-12\\\" *ngIf=\\\"testDataUploadFileSize?.invalid   && ( testDataUploadFileSize.touched || testDataUploadFileSize.dirty|| formDir.submitted)\\\" translate>TestDataUploadFileSizeIsInvalid</span>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n                <div class=\\\"col-lg-6\\\" *ngIf=\\\"testTypeIdOptionValue==5\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"inputSerialNo\\\" class=\\\"col-sm-3 control-label\\\">\\r\\n                      <span class=\\\"text-red\\\">* </span>\\r\\n                      <span translate>OTTService</span>:\\r\\n                    </label>\\r\\n                    <div class=\\\"col-sm-9\\\">\\r\\n                      <select class=\\\"form-control\\\" data-val=\\\"true\\\" formControlName=\\\"ottServiceId\\\">\\r\\n                        <option value=0 translate>SelectOTTServicePlease</option>\\r\\n                        <option *ngFor=\\\"let type of oTTServiceList\\\" [ngValue]=type.id>\\r\\n                          {{type.title}}\\r\\n                        </option>\\r\\n                      </select>\\r\\n                      <span class=\\\"text-danger col-md-12\\\" *ngIf=\\\"ottServiceId?.invalid   && ( ottServiceId.touched || formDir.submitted)\\\" translate>OTTServiceIsRequired</span>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n              <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-lg-6\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"inputName\\\" class=\\\"col-sm-3 control-label\\\">\\r\\n                      <span class=\\\"text-red\\\">* </span>\\r\\n                      <span translate>NetworkTitle</span>:\\r\\n                    </label>\\r\\n                    <div class=\\\"col-sm-9\\\">\\r\\n                      <select class=\\\"form-control\\\" data-val=\\\"true\\\" formControlName=\\\"networkId\\\">\\r\\n                        <option value=0 translate>SelectNetworkPlease</option>\\r\\n                        <option *ngFor=\\\"let type of networkList\\\" [ngValue]=type.id>\\r\\n                          {{type.title}}\\r\\n                        </option>\\r\\n                      </select>\\r\\n                      <span class=\\\"text-danger col-md-12\\\" *ngIf=\\\"networkId?.invalid   && ( networkId.touched || formDir.submitted)\\\" translate>NetworkIsRequired</span>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n                <div class=\\\"col-lg-6\\\" *ngIf=\\\"testTypeIdOptionValue==1  || testTypeIdOptionValue==2\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"inputSerialNo\\\" class=\\\"col-sm-3 control-label\\\">\\r\\n                      <span class=\\\"text-red\\\">* </span>\\r\\n                      <span translate>UsualCallNumber</span>:                      \\r\\n                    </label>\\r\\n                    <div class=\\\"col-sm-9\\\">\\r\\n                      <input class=\\\"form-control\\\" type=\\\"number\\\" formControlName=\\\"usualCallNumber\\\">\\r\\n                      <span class=\\\"text-danger col-md-12\\\" *ngIf=\\\"usualCallNumber?.invalid   && ( usualCallNumber.touched || formDir.submitted)\\\" translate>UsualCallNumberIsInvalid</span>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n              <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-lg-6\\\" *ngIf=\\\"testTypeIdOptionValue==5\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"inputName\\\" class=\\\"col-sm-3 control-label\\\">\\r\\n                      <span class=\\\"text-red\\\">* </span>\\r\\n                      <span translate>OTTServiceType</span>:\\r\\n                    </label>\\r\\n                    <div class=\\\"col-sm-9\\\">\\r\\n                      <select class=\\\"form-control\\\" data-val=\\\"true\\\" formControlName=\\\"ottServiceTestId\\\">\\r\\n                        <option value=0  translate>SelectOTTServiceTestPlease</option>\\r\\n                        <option *ngFor=\\\"let type of oTTServiceTestList\\\" [ngValue]=type.id>\\r\\n                          {{type.title}}\\r\\n                        </option>\\r\\n                      </select>\\r\\n                      <span class=\\\"text-danger col-md-12\\\" *ngIf=\\\"ottServiceTestId?.invalid   && ( ottServiceTestId.touched || formDir.submitted)\\\" translate>OTTServiceIsRequired</span>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n\\r\\n\\r\\n              <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-lg-6\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"inputSerialNo\\\" class=\\\"col-sm-3 control-label\\\">\\r\\n                      <span translate>BandTitle</span>:\\r\\n                    </label>\\r\\n                    <div class=\\\"col-sm-9\\\">\\r\\n                      <select class=\\\"form-control\\\" data-val=\\\"true\\\" formControlName=\\\"bandId\\\">\\r\\n                        <option *ngFor=\\\"let type of bandList\\\" [ngValue]=type.id>\\r\\n                          {{type.title}}\\r\\n                        </option>\\r\\n                      </select>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n              <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-lg-6\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"inputName\\\" class=\\\"col-sm-3 control-label\\\">\\r\\n                      <span translate>SaveLogFile</span>:\\r\\n                    </label>\\r\\n                    <div class=\\\"col-sm-9\\\">\\r\\n                      <div class=\\\"checkbox\\\">\\r\\n                        <label>\\r\\n                          <input type=\\\"checkbox\\\" formControlName=\\\"saveLogFile\\\" [(ngModel)]=\\\"saveLogFileCheckValue\\\">\\r\\n                        </label>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n              <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-lg-6\\\" *ngIf=\\\"saveLogFileCheckValue\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"inputName\\\" class=\\\"col-sm-3 control-label\\\">\\r\\n                      <span class=\\\"text-red\\\">* </span>\\r\\n                      <span translate>LogFilePartitionType</span>:\\r\\n                    </label>\\r\\n                    <div class=\\\"col-sm-9\\\">\\r\\n                      <select class=\\\"form-control\\\" data-val=\\\"true\\\" formControlName=\\\"logFilePartitionTypeId\\\" [(ngModel)]=\\\"logFilePartitionTypeCheckValue\\\">\\r\\n                        <option value=0 translate>SelectLogFilePartitionTypePlease</option>\\r\\n                        <option *ngFor=\\\"let type of logFilePartitionTypeList\\\" [ngValue]=type.id>\\r\\n                          {{type.title}}\\r\\n                        </option>\\r\\n                      </select>\\r\\n                      <span class=\\\"text-danger col-md-12\\\" *ngIf=\\\"logFilePartitionTypeId?.invalid   && ( logFilePartitionTypeId.touched || formDir.submitted)\\\" translate>LogFilePartitionTypeIsRequired</span>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n\\r\\n              </div>\\r\\n              <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-lg-6\\\" *ngIf=\\\"logFilePartitionTypeCheckValue==1 && saveLogFileCheckValue\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"inputSerialNo\\\" class=\\\"col-sm-3 control-label\\\">\\r\\n                      <span class=\\\"text-red\\\">* </span>\\r\\n                      <span translate>LogFilePartitionTime</span>:\\r\\n                    </label>\\r\\n                    <div class=\\\"col-sm-9\\\">\\r\\n                      <input class=\\\"form-control\\\" type=\\\"number\\\" formControlName=\\\"logFilePartitionTime\\\">\\r\\n                      <span class=\\\"text-danger col-md-12\\\" *ngIf=\\\"logFilePartitionTime?.invalid   && ( logFilePartitionTime.touched  || logFilePartitionTime.dirty || formDir.submitted)\\\" translate>LogFilePartitionTimeIsRequired</span>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n                <div class=\\\"col-lg-6\\\" *ngIf=\\\"logFilePartitionTypeCheckValue==2 && saveLogFileCheckValue\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"inputSerialNo\\\" class=\\\"col-sm-3 control-label\\\">\\r\\n                      <span class=\\\"text-red\\\">* </span>\\r\\n                      <span translate>TestDataUploadFileSize</span>:\\r\\n                    </label>\\r\\n                    <div class=\\\"col-sm-9\\\">\\r\\n                      <input class=\\\"form-control\\\" type=\\\"number\\\" formControlName=\\\"logFilePartitionSize\\\">\\r\\n                      <span class=\\\"text-danger col-md-12\\\" *ngIf=\\\"logFilePartitionSize?.invalid   && ( logFilePartitionSize.touched || logFilePartitionSize.dirty || formDir.submitted)\\\" translate>TestDataUploadFileSizeIsRequired</span>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n              <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-lg-6\\\" *ngIf=\\\"saveLogFileCheckValue\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"inputName\\\" class=\\\"col-sm-3 control-label\\\">\\r\\n                      <span class=\\\"text-red\\\">* </span>\\r\\n                      <span translate>LogFileHoldTime</span>:\\r\\n                    </label>\\r\\n                    <div class=\\\"col-sm-9\\\">\\r\\n                      <input class=\\\"form-control\\\" type=\\\"number\\\" formControlName=\\\"logFileHoldTime\\\">\\r\\n                      <span class=\\\"text-danger col-md-12\\\" *ngIf=\\\"logFileHoldTime?.invalid   && ( logFileHoldTime.touched || logFileHoldTime.dirty || formDir.submitted)\\\" translate>LogFileHoldTimeIsRequired</span>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div><!-- /.box-body -->\\r\\n            <div class=\\\"box-footer\\\">\\r\\n              <button class=\\\"btn btn-danger rowEndAligne\\\" (click)=\\\"cancel()\\\" translate>Cancel</button>\\r\\n              <button type=\\\"submit\\\" class=\\\"btn btn-primary rowEndAligne\\\" translate>Save</button>\\r\\n            </div><!-- /.box-footer -->\\r\\n          </form>\\r\\n          <div class=\\\"overlay\\\" *ngIf=\\\"showloader\\\">\\r\\n            <i class=\\\"fa fa-refresh fa-spin\\\"></i>\\r\\n          </div>\\r\\n        </div><!-- /.box -->\\r\\n\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n  </section><!-- /.content -->\\r\\n</div><!-- /.content-wrapper -->\\r\\n\"","module.exports = \"<!-- Content Wrapper. Contains page content -->\\r\\n<div class=\\\"content-wrapper\\\">\\r\\n  <!-- Content Header (Page header) -->\\r\\n\\r\\n  <section class=\\\"content-header\\\">\\r\\n    <h1>\\r\\n      <span translate>GroupTestList</span>\\r\\n      <small>{{groupTitle}}</small>\\r\\n    </h1>\\r\\n    <ol class=\\\"breadcrumb\\\">\\r\\n\\r\\n      <li><a [routerLink]=\\\"['']\\\" translate><i class=\\\"fa fa-dashboard\\\"></i>Home</a></li>\\r\\n      <li><a [routerLink]=\\\"['/machine/Group']\\\"><span translate>DeviceGroup</span></a></li>\\r\\n      <li class=\\\"active\\\"><span translate>GroupTestList</span> {{groupTitle}}</li>\\r\\n\\r\\n    </ol>\\r\\n  </section>\\r\\n\\r\\n  <!--<app-breadcrumb></app-breadcrumb>-->\\r\\n  <!-- Main content -->\\r\\n  <section class=\\\"content\\\">\\r\\n\\r\\n    <!--------------------------\\r\\n    | Your Page Content Here |\\r\\n    -------------------------->\\r\\n\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-xs-12\\\">\\r\\n        <div class=\\\"box box-primary\\\">\\r\\n          <div class=\\\"box-body\\\">\\r\\n              <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-md-12\\\">\\r\\n                  <mat-form-field>\\r\\n                    <mat-label translate>Search</mat-label>\\r\\n                    <input matInput (keyup)=\\\"applyFilter($event)\\\" #input>\\r\\n                  </mat-form-field>\\r\\n                \\r\\n                  <a class=\\\"btn btn-success btn-lg rowEndAligne\\\" [routerLink]=\\\"['/Test/Group/Assignment/Create/', this.groupId,this.groupTitle]\\\" [class.disabled]=\\\"!definedTestMachineGroupList\\\" ><span translate>AssignTest</span> <i class=\\\"fa fa-plus\\\"></i></a>\\r\\n                </div>\\r\\n              </div>\\r\\n\\r\\n              <div class=\\\"mat-table-container mat-elevation-z8\\\">\\r\\n                <table mat-table [dataSource]=\\\"dataSource\\\" matSort class=\\\"table table-hover table-striped text-nowrap\\\">\\r\\n\\r\\n                  <!--- Note that these columns can be defined in any order.\\r\\n                  The actual rendered columns are set as a property on the row definition\\\" -->\\r\\n\\r\\n                  <ng-container matColumnDef=\\\"index\\\">\\r\\n                    <th mat-header-cell *matHeaderCellDef><span translate>Row</span></th>\\r\\n                    <td mat-cell *matCellDef=\\\"let element;let i = index;\\\">\\r\\n                      {{this.paginator.pageIndex == 0 ? i + 1 : 1 + i + this.paginator.pageIndex * this.paginator.pageSize}}\\r\\n                    </td>\\r\\n                  </ng-container>\\r\\n\\r\\n                  <ng-container matColumnDef=\\\"definedTestTitle\\\">\\r\\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header><span translate>Title</span></th>\\r\\n                    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.definedTestTitle}} </td>\\r\\n                  </ng-container>\\r\\n\\r\\n                  <ng-container matColumnDef=\\\"testTypeTitle\\\">\\r\\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header><span translate>TestTypeTitle</span></th>\\r\\n                    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.testTypeTitle}} </td>\\r\\n                  </ng-container>\\r\\n\\r\\n                  <ng-container matColumnDef=\\\"beginDate\\\">\\r\\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header><span translate>StartDate</span></th>\\r\\n                    <td mat-cell *matCellDef=\\\"let element\\\"> {{langService.convertDate(element.beginDate)}} </td>\\r\\n                  </ng-container>\\r\\n\\r\\n                  <ng-container matColumnDef=\\\"endDate\\\">\\r\\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header><span translate>EndDate</span></th>\\r\\n                    <td mat-cell *matCellDef=\\\"let element\\\"> {{langService.convertDate(element.endDate)}} </td>\\r\\n                  </ng-container>\\r\\n\\r\\n                  <ng-container matColumnDef=\\\"actions\\\" sticky [stickyEnd]=\\\"true\\\">\\r\\n                    <th mat-header-cell *matHeaderCellDef></th>\\r\\n                    <td mat-cell *matCellDef=\\\"let element\\\">\\r\\n\\r\\n                      <a class=\\\"btn btn-default gridbutton\\\"  [class.disabled]=\\\"!element.editable\\\" [routerLink]=\\\"['/Test/Group/Assignment/Edit/' , element.machineGroupId + ',' + element.id , groupTitle ]\\\" title=\\\"{{ 'Edit' | translate }}\\\"><i class=\\\"fa fa-edit\\\"></i></a>\\r\\n\\r\\n                    </td>\\r\\n                  </ng-container>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n                  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n                  <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n                </table>\\r\\n                <mat-paginator [pageSize]=\\\"10\\\" [pageSizeOptions]=\\\"[10 , 25 , 50 , 100]\\\" [showFirstLastButtons]=\\\"true\\\"></mat-paginator>\\r\\n\\r\\n              </div>\\r\\n          </div><!-- /.box-body -->\\r\\n          <div class=\\\"overlay\\\" *ngIf=\\\"!dataSource\\\">\\r\\n            <i class=\\\"fa fa-refresh fa-spin\\\"></i>\\r\\n          </div>\\r\\n        </div><!-- /.box -->\\r\\n      </div><!-- /.col -->\\r\\n    </div><!-- /.row -->\\r\\n  </section><!-- /.content -->\\r\\n</div><!-- /.content-wrapper -->\\r\\n\"","module.exports = \"<!-- Content Wrapper. Contains page content -->\\r\\n<div class=\\\"content-wrapper\\\">\\r\\n  <!-- Content Header (Page header) -->\\r\\n  <section class=\\\"content-header\\\">\\r\\n    <h1>\\r\\n      {{breadcroumb | translate}}\\r\\n      <small>{{GroupTitle}}</small>\\r\\n    </h1>\\r\\n    <ol class=\\\"breadcrumb\\\">\\r\\n      <li><a [routerLink]=\\\"['']\\\" translate><i class=\\\"fa fa-dashboard\\\"></i>Home</a></li>\\r\\n      <li><a [routerLink]=\\\"['/machine/Group']\\\"><span translate>DeviceGroup</span></a></li>\\r\\n      <li><a [routerLink]=\\\"['/Test/Group/Assignment/',machineGroupId , GroupTitle]\\\"><span translate>GroupTestList</span>  {{GroupTitle}} </a></li>\\r\\n      <li class=\\\"active\\\">{{breadcroumb | translate }} {{GroupTitle}}</li>\\r\\n    </ol>\\r\\n  </section>\\r\\n  <!--<app-breadcrumb></app-breadcrumb>-->\\r\\n  <!-- Main content -->\\r\\n  <section class=\\\"content\\\">\\r\\n\\r\\n    <!--------------------------\\r\\n  | Your Page Content Here |\\r\\n  -------------------------->\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-xs-12\\\">\\r\\n        <div class=\\\"box box-primary\\\">\\r\\n          <!--<div class=\\\"box-header\\\">\\r\\n          <i class=\\\"fa fa-simplybuilt\\\" style=\\\"margin-left:10px;\\\"></i>\\r\\n          <h3 class=\\\"box-title \\\">فهرست دستگاه ها</h3>\\r\\n        </div>-->\\r\\n          <!-- /.box-header -->\\r\\n          <form class=\\\"form-horizontal\\\" [formGroup]=\\\"definedTestGroupForm\\\" (ngSubmit)=\\\"save()\\\" #formDir=\\\"ngForm\\\" novalidate>\\r\\n            <div class=\\\"box-body\\\">\\r\\n              <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-lg-6\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"inputName\\\" class=\\\"col-sm-3 control-label\\\">\\r\\n                      <span class=\\\"text-red\\\">* </span>\\r\\n                      <span translate>Test</span>:\\r\\n                    </label>\\r\\n                    <div class=\\\"col-sm-9\\\">\\r\\n                      <select class=\\\"form-control\\\" data-val=\\\"true\\\" formControlName=\\\"definedTestId\\\" required>\\r\\n                        <option value=0 translate>SelectTestPlease</option>\\r\\n                        <option *ngFor=\\\"let test of definedTestList\\\" [ngValue]=test.id>\\r\\n                          {{test.title}}\\r\\n                        </option>\\r\\n                      </select>\\r\\n                      <span class=\\\"text-red col-md-12\\\" *ngIf=\\\"(definedTestId.invalid) && (definedTestId.touched || formDir.submitted)\\\" translate>TestIsRequired</span>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n                <div class=\\\"col-lg-6\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"inputSerialNo\\\" class=\\\"col-sm-3 control-label\\\">\\r\\n                      <span translate>Activation</span>:\\r\\n                    </label>\\r\\n                    <div class=\\\"col-sm-9\\\">\\r\\n                      <div class=\\\"checkbox\\\">\\r\\n                        <label>\\r\\n                          <input type=\\\"checkbox\\\" formControlName=\\\"isActive\\\">\\r\\n                        </label>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n\\r\\n              <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-lg-6\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"inputName\\\" class=\\\"col-sm-3 control-label\\\">\\r\\n                      <span class=\\\"text-red\\\">* </span>\\r\\n                      <span translate>StartDate</span>:\\r\\n                    </label>\\r\\n                    <div class=\\\"col-sm-9\\\">\\r\\n                      <div class=\\\"row flex-container\\\">\\r\\n                        <div class=\\\"col-sm-5\\\">\\r\\n                          <input type=\\\"time\\\" class=\\\"form-control\\\" formControlName=\\\"beginDateTime\\\" required>\\r\\n                          <span class=\\\"text-red col-md-12\\\" *ngIf=\\\"f.beginDateTime.invalid && (f.beginDateTime.touched || formDir.submitted)\\\" translate>BeginTimeIsRequired</span>\\r\\n                        </div>\\r\\n                        <div class=\\\"col-sm-7\\\">\\r\\n                          <input [matDatepicker]=\\\"beginDate\\\" type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"beginDate\\\" formControlName=\\\"beginDate\\\" (click)=\\\"beginDate.open()\\\" required>\\r\\n                          <mat-datepicker #beginDate></mat-datepicker>\\r\\n                          <span class=\\\"text-red col-md-12\\\" *ngIf=\\\"f.beginDate.invalid && (f.beginDate.touched || formDir.submitted)\\\" translate>BeginDateIsRequired</span>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n                <div class=\\\"col-lg-6\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"inputSerialNo\\\" class=\\\"col-sm-3 control-label\\\">\\r\\n                      <span class=\\\"text-red\\\">* </span>\\r\\n                      <span translate>EndDate</span>:\\r\\n                    </label>\\r\\n                    <div class=\\\"col-sm-9\\\">\\r\\n                      <div class=\\\"row flex-container\\\">\\r\\n                        <div class=\\\"col-sm-5\\\">\\r\\n                          <input type=\\\"time\\\" class=\\\"form-control\\\" formControlName=\\\"endDateTime\\\" required>\\r\\n                          <span class=\\\"text-red col-md-12\\\" *ngIf=\\\"f.endDateTime.invalid && (f.endDateTime.touched || formDir.submitted)\\\" translate>EndTimeIsRequired</span>\\r\\n                        </div>\\r\\n                        <div class=\\\"col-sm-7\\\">\\r\\n                          <input [matDatepicker]=\\\"endDate\\\" type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"endDate\\\" (click)=\\\"endDate.open()\\\" required>\\r\\n                          <mat-datepicker #endDate></mat-datepicker>\\r\\n                          <span class=\\\"text-red col-md-12\\\" *ngIf=\\\"f.endDate.invalid && (f.endDate.touched || formDir.submitted)\\\" translate>EndDateIsRequired</span>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n              <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-lg-6\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"inputName\\\" class=\\\"col-sm-3 control-label\\\">\\r\\n                      <span class=\\\"text-red\\\">* </span>\\r\\n                      <span translate>SimcardNo</span>:\\r\\n                    </label>\\r\\n                    <div class=\\\"col-sm-9\\\">\\r\\n                      <select class=\\\"form-control\\\" data-val=\\\"true\\\" formControlName=\\\"sim\\\" required>\\r\\n                        <option value=0 translate>SelectSimcardNoPlease</option>\\r\\n                        <option value=1> 1 </option>\\r\\n                        <option value=2> 2 </option>\\r\\n                        <option value=3> 3 </option>\\r\\n                        <option value=4> 4 </option>\\r\\n                      </select>\\r\\n                      <span class=\\\"text-red col-md-12\\\" *ngIf=\\\"sim?.invalid && (sim.dirty || sim.touched || formDir.submitted)\\\" translate>SimcardNoIsRequired</span>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div><!-- /.box-body -->\\r\\n            <div class=\\\"box-footer\\\">\\r\\n\\r\\n              <button class=\\\"btn btn-danger rowEndAligne\\\" (click)=\\\"cancel()\\\" translate>Cancel</button>\\r\\n              <button type=\\\"submit\\\" class=\\\"btn btn-primary rowEndAligne\\\" translate>Save</button>\\r\\n            </div><!-- /.box-footer -->\\r\\n          </form>\\r\\n          <div class=\\\"overlay\\\" *ngIf=\\\"showloader\\\">\\r\\n            <i class=\\\"fa fa-refresh fa-spin\\\"></i>\\r\\n          </div>\\r\\n        </div><!-- /.box -->\\r\\n      </div><!-- /.col -->\\r\\n    </div><!-- /.row -->\\r\\n\\r\\n    <div class=\\\"modal fade\\\" id=\\\"modal-default\\\" data-backdrop=\\\"static\\\" style=\\\"display: none;\\\">\\r\\n      <div class=\\\"modal-dialog\\\">\\r\\n        <div class=\\\"modal-content\\\">\\r\\n          <div class=\\\"modal-header\\\">\\r\\n            <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-label=\\\"Close\\\">\\r\\n              <span aria-hidden=\\\"true\\\">×</span>\\r\\n            </button>\\r\\n            <h4 class=\\\"modal-title\\\" translate>Noticeable</h4>\\r\\n          </div>\\r\\n          <div class=\\\"modal-body\\\">\\r\\n            <p>{{ReplaceTestConfirmMessage}}</p>\\r\\n          </div>\\r\\n          <div class=\\\"modal-footer\\\">\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-default pull-left\\\" data-dismiss=\\\"modal\\\" translate>Cancel</button>\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"AcceptConfirm()\\\" translate>Ok</button>\\r\\n          </div>\\r\\n        </div>\\r\\n        <!-- /.modal-content -->\\r\\n      </div>\\r\\n      <!-- /.modal-dialog -->\\r\\n    </div>\\r\\n  </section>\\r\\n  <!-- /.content -->\\r\\n</div>\\r\\n<!-- /.content-wrapper -->\\r\\n\"","module.exports = \"<!-- Content Wrapper. Contains page content -->\\r\\n<div class=\\\"content-wrapper\\\">\\r\\n  <!-- Content Header (Page header) -->\\r\\n  <section class=\\\"content-header\\\">\\r\\n    <h1>\\r\\n      <span translate>DeviceTestList</span>\\r\\n      <small>{{MachineTitle}}</small>\\r\\n    </h1>\\r\\n    <ol class=\\\"breadcrumb\\\">\\r\\n      <li><a [routerLink]=\\\"['']\\\" translate><i class=\\\"fa fa-dashboard\\\"></i>Home</a></li>\\r\\n      <li><a [routerLink]=\\\"['/machine']\\\" translate>DeviceList</a></li>\\r\\n      <li class=\\\"active\\\"><span translate>DeviceTestList</span>  {{MachineTitle}}</li>\\r\\n    </ol>\\r\\n  </section>\\r\\n  <!--<app-breadcrumb></app-breadcrumb>-->\\r\\n  <!-- Main content -->\\r\\n  <section class=\\\"content\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-xs-12\\\">\\r\\n        <div class=\\\"box box-primary\\\">\\r\\n          <div class=\\\"box-body\\\">\\r\\n            <div class=\\\"row\\\">\\r\\n              <div class=\\\"col-md-12\\\">\\r\\n                <mat-form-field>\\r\\n                  <mat-label translate>Search</mat-label>\\r\\n                  <input matInput (keyup)=\\\"applyFilter($event)\\\" #input>\\r\\n                </mat-form-field>\\r\\n\\r\\n                <a class=\\\"btn btn-success btn-lg rowEndAligne\\\" [routerLink]=\\\"['/Test/Assignment/create/', this.machinId , this.MachineTitle]\\\"><span translate>AssignTest</span> <i class=\\\"fa fa-plus\\\"></i></a>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"mat-table-container mat-elevation-z8\\\">\\r\\n              <table mat-table [dataSource]=\\\"dataSource\\\" matSort class=\\\"table table-hover table-striped text-nowrap\\\">\\r\\n\\r\\n                <!--- Note that these columns can be defined in any order.\\r\\n                The actual rendered columns are set as a property on the row definition\\\" -->\\r\\n\\r\\n                <ng-container matColumnDef=\\\"index\\\">\\r\\n                  <th mat-header-cell *matHeaderCellDef><span translate>Row</span></th>\\r\\n                  <td mat-cell *matCellDef=\\\"let element;let i = index;\\\">\\r\\n                    {{this.paginator.pageIndex == 0 ? i + 1 : 1 + i + this.paginator.pageIndex * this.paginator.pageSize}}\\r\\n                  </td>\\r\\n                </ng-container>\\r\\n\\r\\n                <ng-container matColumnDef=\\\"definedTestTitle\\\">\\r\\n                  <th mat-header-cell *matHeaderCellDef mat-sort-header><span translate>Title</span></th>\\r\\n                  <td mat-cell *matCellDef=\\\"let element\\\"> {{element.definedTestTitle}} </td>\\r\\n                </ng-container>\\r\\n\\r\\n                <ng-container matColumnDef=\\\"testTypeTitle\\\">\\r\\n                  <th mat-header-cell *matHeaderCellDef mat-sort-header><span translate>TestTypeTitle</span></th>\\r\\n                  <td mat-cell *matCellDef=\\\"let element\\\"> {{element.testTypeTitle}} </td>\\r\\n                </ng-container>\\r\\n\\r\\n                <ng-container matColumnDef=\\\"beginDate\\\">\\r\\n                  <th mat-header-cell *matHeaderCellDef mat-sort-header><span translate>StartDate</span></th>\\r\\n                  <td mat-cell *matCellDef=\\\"let element\\\"> {{langService.convertDate(element.beginDate)}} </td>\\r\\n                </ng-container>\\r\\n\\r\\n                <ng-container matColumnDef=\\\"endDate\\\">\\r\\n                  <th mat-header-cell *matHeaderCellDef mat-sort-header><span translate>EndDate</span></th>\\r\\n                  <td mat-cell *matCellDef=\\\"let element\\\"> {{langService.convertDate(element.endDate)}} </td>\\r\\n                </ng-container>\\r\\n\\r\\n                <ng-container matColumnDef=\\\"status\\\">\\r\\n                  <th mat-header-cell *matHeaderCellDef mat-sort-header><span translate>TestStatus</span></th>\\r\\n                  <td mat-cell *matCellDef=\\\"let element\\\">\\r\\n                    <i class=\\\"fa fa-2x\\\" title=\\\"{{ element.status | translate }}\\\"\\r\\n                       [ngClass]=\\\"element.status == 'Waiting' ? 'fa-pause-circle text-yellow' :\\r\\n                       element.status == 'Running' ? 'fa-play-circle text-blue' :\\r\\n                       element.status == 'Overwritten' ? 'fa-refresh text-red' :\\r\\n                       element.status == 'Finished' ? 'fa-check-circle text-green' :\\r\\n                       element.status == 'NotReceivedByDevice' ? 'fa-minus-circle text-red' : 'fa-frown-o text-light-blue'\\\">\\r\\n                    </i>\\r\\n                  </td>\\r\\n                </ng-container>\\r\\n\\r\\n                <ng-container matColumnDef=\\\"actions\\\" sticky [stickyEnd]=\\\"true\\\">\\r\\n                  <th mat-header-cell *matHeaderCellDef></th>\\r\\n                  <td mat-cell *matCellDef=\\\"let element\\\">\\r\\n\\r\\n                    <a class=\\\"btn btn-default gridbutton\\\"\\r\\n                       [routerLink]=\\\"['/Test/Assignment/edit/' , this.machinId + ',' + element.id , this.MachineTitle ]\\\"\\r\\n                       title=\\\"{{ 'Edit' | translate }}\\\"\\r\\n                       [class.disabled]=\\\"(element.status != 'Waiting' && element.status != 'NotReceivedByDevice') \\\"><i class=\\\"fa fa-edit\\\"></i></a>\\r\\n\\r\\n                  </td>\\r\\n                </ng-container>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n                <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n                <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n              </table>\\r\\n              <mat-paginator [pageSize]=\\\"10\\\" [pageSizeOptions]=\\\"[10 , 25 , 50 , 100]\\\" [showFirstLastButtons]=\\\"true\\\"></mat-paginator>\\r\\n\\r\\n            </div>\\r\\n          </div><!-- /.box-body -->\\r\\n          <div class=\\\"overlay\\\" *ngIf=\\\"!dataSource\\\">\\r\\n            <i class=\\\"fa fa-refresh fa-spin\\\"></i>\\r\\n          </div>\\r\\n        </div><!-- /.box -->\\r\\n      </div><!-- /.col -->\\r\\n    </div><!-- /.row -->\\r\\n\\r\\n  </section><!-- /.content -->\\r\\n</div><!-- /.content-wrapper -->\\r\\n\"","module.exports = \"<!-- Content Wrapper. Contains page content -->\\r\\n<div class=\\\"content-wrapper\\\">\\r\\n  <!-- Content Header (Page header) -->\\r\\n  <section class=\\\"content-header\\\">\\r\\n    <h1>\\r\\n      {{breadcroumb | translate}}\\r\\n      <small>{{machineTitle}}</small>\\r\\n    </h1>\\r\\n    <ol class=\\\"breadcrumb\\\">\\r\\n      <li><a [routerLink]=\\\"['']\\\" translate><i class=\\\"fa fa-dashboard\\\"></i>Home</a></li>\\r\\n      <li><a [routerLink]=\\\"['/machine']\\\" translate>DeviceList</a></li>\\r\\n      <li><a [routerLink]=\\\"['/Test/Assignment/Machine/' , machineId , machineTitle]\\\"><span translate>DeviceTestList</span> {{machineTitle}}</a></li>\\r\\n      <li class=\\\"active\\\">{{breadcroumb | translate}} {{machineTitle}}</li>\\r\\n    </ol>\\r\\n  </section>\\r\\n  <!--<app-breadcrumb></app-breadcrumb>-->\\r\\n  <!-- Main content -->\\r\\n  <section class=\\\"content\\\">\\r\\n\\r\\n    <!--------------------------\\r\\n  | Your Page Content Here |\\r\\n  -------------------------->\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-xs-12\\\">\\r\\n        <div class=\\\"box box-primary\\\">\\r\\n          <!--<div class=\\\"box-header\\\">\\r\\n          <i class=\\\"fa fa-simplybuilt\\\" style=\\\"margin-left:10px;\\\"></i>\\r\\n          <h3 class=\\\"box-title \\\">فهرست دستگاه ها</h3>\\r\\n        </div>-->\\r\\n          <!-- /.box-header -->\\r\\n          <form class=\\\"form-horizontal\\\" [formGroup]=\\\"definedTestMachineForm\\\" (ngSubmit)=\\\"save()\\\" #formDir=\\\"ngForm\\\" novalidate>\\r\\n            <div class=\\\"box-body\\\">\\r\\n              <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-lg-6\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"inputName\\\" class=\\\"col-sm-3 control-label\\\">\\r\\n                      <span class=\\\"text-red\\\">* </span>\\r\\n                      <span translate>Test</span>:\\r\\n                    </label>\\r\\n                    <div class=\\\"col-sm-9\\\">\\r\\n                      <select class=\\\"form-control\\\" data-val=\\\"true\\\" formControlName=\\\"definedTestId\\\">\\r\\n                        <option value=0 translate>SelectTestPlease</option>\\r\\n                        <option *ngFor=\\\"let test of definedTestList\\\" [ngValue]=test.id>\\r\\n                          {{test.title}}\\r\\n                        </option>\\r\\n                      </select>\\r\\n                      <span class=\\\"text-danger col-md-12\\\" *ngIf=\\\"(definedTestId?.invalid) && (definedTestId.touched || formDir.submitted)\\\" translate>TestIsRequired</span>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n                <div class=\\\"col-lg-6\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"inputSerialNo\\\" class=\\\"col-sm-3 control-label\\\">\\r\\n                      <span class=\\\"text-red\\\">* </span>\\r\\n                      <span translate>Activation</span>:\\r\\n                    </label>\\r\\n                    <div class=\\\"col-sm-9\\\">\\r\\n                      <div class=\\\"checkbox\\\">\\r\\n                        <label>\\r\\n                          <input type=\\\"checkbox\\\" formControlName=\\\"isActive\\\">\\r\\n                        </label>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n\\r\\n              <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-lg-6\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"inputName\\\" class=\\\"col-sm-3 control-label\\\">\\r\\n                      <span class=\\\"text-red\\\">* </span>\\r\\n                      <span translate>StartDate</span>:\\r\\n                    </label>\\r\\n                    <div class=\\\"col-sm-9\\\">\\r\\n                      <div class=\\\"row flex-container\\\">\\r\\n                        <div class=\\\"col-sm-5\\\">\\r\\n                          <input type=\\\"time\\\" class=\\\"form-control\\\" formControlName=\\\"beginDateTime\\\">\\r\\n                          <span class=\\\"text-danger col-md-12\\\" *ngIf=\\\"f.beginDateTime?.invalid && (f.beginDateTime.touched || formDir.submitted)\\\" translate>BeginTimeIsRequired</span>\\r\\n                        </div>\\r\\n                        <div class=\\\"col-sm-7\\\">\\r\\n                          <input [matDatepicker]=\\\"beginDate\\\" type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"beginDate\\\" (click)=\\\"beginDate.open()\\\">\\r\\n                          <mat-datepicker #beginDate></mat-datepicker>\\r\\n                          <span class=\\\"text-danger col-md-12\\\" *ngIf=\\\"f.beginDate?.invalid && (f.beginDate.touched || formDir.submitted)\\\" translate>BeginDateIsRequired</span>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n                <div class=\\\"col-lg-6\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"inputSerialNo\\\" class=\\\"col-sm-3 control-label\\\">\\r\\n                      <span class=\\\"text-red\\\">* </span>\\r\\n                      <span translate>EndDate</span>:\\r\\n                    </label>\\r\\n                    <div class=\\\"col-sm-9\\\">\\r\\n                      <div class=\\\"row flex-container\\\">\\r\\n                        <div class=\\\"col-sm-5\\\">\\r\\n                          <input type=\\\"time\\\" class=\\\"form-control\\\" formControlName=\\\"endDateTime\\\">\\r\\n                          <span class=\\\"text-danger col-md-12\\\" *ngIf=\\\"f.endDateTime?.invalid && (f.endDateTime.touched || formDir.submitted)\\\" translate>EndTimeIsRequired</span>\\r\\n                        </div>\\r\\n                        <div class=\\\"col-sm-7\\\">\\r\\n                          <input [matDatepicker]=\\\"endDate\\\" type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"endDate\\\" (click)=\\\"endDate.open()\\\">\\r\\n                          <mat-datepicker #endDate></mat-datepicker>\\r\\n                          <span class=\\\"text-danger col-md-12\\\" *ngIf=\\\"f.endDate?.invalid && (f.endDate.touched || formDir.submitted)\\\" translate>EndDateIsRequired</span>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n\\r\\n              <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-lg-6\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"inputName\\\" class=\\\"col-sm-3 control-label\\\">\\r\\n                      <span class=\\\"text-red\\\">* </span>\\r\\n                      <span translate>SimcardNo</span>:\\r\\n                    </label>\\r\\n                    <div class=\\\"col-sm-9\\\">\\r\\n                      <select class=\\\"form-control\\\" data-val=\\\"true\\\" formControlName=\\\"sim\\\">\\r\\n                        <option value=0 translate>SelectSimcardNoPlease</option>\\r\\n                        <option value=1> 1 </option>\\r\\n                        <option value=2> 2 </option>\\r\\n                        <option value=3> 3 </option>\\r\\n                        <option value=4> 4 </option>\\r\\n                      </select>\\r\\n                      <span class=\\\"text-danger col-md-12\\\" *ngIf=\\\"sim?.invalid && (sim.touched || formDir.submitted)\\\" translate>SimcardNoIsRequired</span>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div><!-- /.box-body -->\\r\\n            <div class=\\\"box-footer\\\">\\r\\n\\r\\n              <button class=\\\"btn btn-danger rowEndAligne\\\" (click)=\\\"cancel()\\\" translate>Cancel</button>\\r\\n              <button type=\\\"submit\\\" class=\\\"btn btn-primary rowEndAligne\\\" translate>Save</button>\\r\\n            </div><!-- /.box-footer -->\\r\\n          </form>\\r\\n          <div class=\\\"overlay\\\" *ngIf=\\\"showloader\\\">\\r\\n            <i class=\\\"fa fa-refresh fa-spin\\\"></i>\\r\\n          </div>\\r\\n        </div><!-- /.box -->\\r\\n      </div><!-- /.col -->\\r\\n    </div><!-- /.row -->\\r\\n\\r\\n    <div class=\\\"modal fade\\\" id=\\\"modal-default\\\" data-backdrop=\\\"static\\\" style=\\\"display: none;\\\">\\r\\n      <div class=\\\"modal-dialog\\\">\\r\\n        <div class=\\\"modal-content\\\">\\r\\n          <div class=\\\"modal-header\\\">\\r\\n            <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-label=\\\"Close\\\">\\r\\n              <span aria-hidden=\\\"true\\\">×</span>\\r\\n            </button>\\r\\n            <h4 class=\\\"modal-title\\\" translate>Noticeable</h4>\\r\\n          </div>\\r\\n          <div class=\\\"modal-body\\\">\\r\\n            <p>{{ReplaceTestConfirmMessage}}</p>\\r\\n          </div>\\r\\n          <div class=\\\"modal-footer\\\">\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-default pull-left\\\" data-dismiss=\\\"modal\\\" translate>Cancel</button>\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"AcceptConfirm()\\\" translate>Ok</button>\\r\\n          </div>\\r\\n        </div>\\r\\n        <!-- /.modal-content -->\\r\\n      </div>\\r\\n      <!-- /.modal-dialog -->\\r\\n    </div>\\r\\n\\r\\n  </section><!-- /.content -->\\r\\n</div><!-- /.content-wrapper -->\\r\\n\"","module.exports = \".leftAlign {\\r\\n  text-align: left;\\r\\n}\\r\\n\\r\\n.gridbutton {\\r\\n  margin: 1px 2px;\\r\\n}\\r\\n\\r\\n.gridIcon {\\r\\n  font-size: 20px;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdGVzdC9kZWZpbmVkVGVzdC9kZWZpbmVkVGVzdC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLGVBQWU7QUFDakIiLCJmaWxlIjoic3JjL2FwcC90ZXN0L2RlZmluZWRUZXN0L2RlZmluZWRUZXN0LmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIubGVmdEFsaWduIHtcclxuICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG59XHJcblxyXG4uZ3JpZGJ1dHRvbiB7XHJcbiAgbWFyZ2luOiAxcHggMnB4O1xyXG59XHJcblxyXG4uZ3JpZEljb24ge1xyXG4gIGZvbnQtc2l6ZTogMjBweDtcclxufVxyXG4iXX0= */\"","import { Component, ViewChild } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { PaginationInstance } from 'ngx-pagination/dist/pagination-instance';\nimport { Sort, MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\n// only used for modal\r\ndeclare var $: any;\n\nexport interface UserData {\r\n  id: number;\r\n  title: string;\r\n  layer3Messages: boolean;\r\n  repeatTime: string;\r\n  repeatCount: number;\r\n  measurementInterval: number;\r\n  testTypeTitle: number;\r\n  networkTitle: string;\r\n  bandTitle: string;\r\n  saveLogFile: boolean;\r\n  editable: boolean;\r\n}\n\n\n@Component({\n  selector: 'app-definedTest',\n  templateUrl: './definedTest.component.html',\n  styleUrls: ['./definedTest.component.css']\n})\nexport class DefinedTestComponent {\n\n  public showloader: boolean = false;\r\n\n  displayedColumns: string[] = ['index', 'title', 'layer3Messages', 'repeatTime', 'repeatCount', 'measurementInterval', 'testTypeTitle', 'networkTitle', 'bandTitle', 'saveLogFile', 'actions'];\n  dataSource: MatTableDataSource<UserData>;\n\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\n\n  selectedRow: number;\n  public filter: string = '';\n\n\n  selectedId: number;\n  selectedIdCanEdit: any;\n  title: string;\n  constructor(\n    private _http: HttpClient,\n    private toastrService: ToastrService,\n    private translate: TranslateService\n  ) {\n    this.getDefinedTests();\n\n  }\n  getDefinedTests() {\n    this.showloader = true;\n    this._http.get('api/DefinedTest/Index').pipe(map(\n      response => {\n        return response;\n      }\n    )).subscribe(\n      data => {\n\n        this.dataSource = new MatTableDataSource(<any>data);\r\n        this.dataSource.paginator = this.paginator;\r\n        this.dataSource.sort = this.sort;\n        this.showloader = false;\n      }\n    );\n  }\n\n  applyFilter(event: Event) {\r\n    const filterValue = (event.target as HTMLInputElement).value;\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n\r\n    if (this.dataSource.paginator) {\r\n      this.dataSource.paginator.firstPage();\r\n    }\r\n  }\n\n  deleteTest(id, title) {\n\n    this.selectedId = id;\n    this.title = title;\n  }\n\n  doDelete() {\n    this.showloader = true;\n    this._http.delete('api/DefinedTest/Delete/' + this.selectedId).pipe(map(response => {\n      this.showloader = false;\n      if (response == 2) {\n        this.toastrService.error(this.translate.instant('CannotDeleteAssignedTest'), this.translate.instant('Error'));\n      } return response;\r\n    })).subscribe(() => {\n\n      this.getDefinedTests();\n      $('#modal-default').modal('hide');\n    }, error => console.error(error));\n  }\n}\n","module.exports = \".form-control {\\r\\n  display: block;\\r\\n  width: 100%;\\r\\n  height: calc(1.5em + .75rem + 15px)\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdGVzdC9kZWZpbmVkVGVzdEVkaXQvZGVmaW5lZFRlc3RFZGl0LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxjQUFjO0VBQ2QsV0FBVztFQUNYO0FBQ0YiLCJmaWxlIjoic3JjL2FwcC90ZXN0L2RlZmluZWRUZXN0RWRpdC9kZWZpbmVkVGVzdEVkaXQuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5mb3JtLWNvbnRyb2wge1xyXG4gIGRpc3BsYXk6IGJsb2NrO1xyXG4gIHdpZHRoOiAxMDAlO1xyXG4gIGhlaWdodDogY2FsYygxLjVlbSArIC43NXJlbSArIDE1cHgpXHJcbn1cclxuIl19 */\"","import { DefinedTest } from '../../Shared/models/definedTest';\nimport { Component, OnInit, Inject } from '@angular/core';\nimport { FormBuilder, Validators, FormGroup, ValidatorFn, AbstractControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\n\nconst MyAwesomeRangeValidator: ValidatorFn = (fg: FormGroup) => {\n  fg.get('usualCallDuration').setErrors(null);\n  fg.get('usualCallWaitTime').setErrors(null);\n  fg.get('usualCallNumber').setErrors(null);\n  fg.get('testDataId').setErrors(null);\n  fg.get('testDataTypeId').setErrors(null);\n  fg.get('testDataServer').setErrors(null);\n  fg.get('testDataUserName').setErrors(null);\n  fg.get('testDataPassword').setErrors(null);\n  fg.get('ottServiceId').setErrors(null);\n  fg.get('ottServiceTestId').setErrors(null);\n  fg.get('repeatTime').setErrors(null);\n  fg.get('repeatCount').setErrors(null);\n  fg.get('ttl').setErrors(null);\n\n  const testTypeId = fg.get('testTypeId').value;\n  const repeatTypeId = fg.get('repeatTypeId').value;\n  const saveLog = fg.get('saveLogFile').value;\n\n  if (false) {\n    return { range: false }\n  }\n  //addby omid -- check logfileSize and other parameter\n  if (saveLog) { //true\n    if (fg.get('logFilePartitionTypeId').value == null || fg.get('logFilePartitionTypeId').value == 0) { //نوع ذخیره سازی را مشخص نکرده و تیک ذخیره سازی خورده\n      fg.get('logFilePartitionTypeId').setErrors({ 'incorrect': true });\n    }\n    if (fg.get('logFilePartitionTypeId').value == 1) {//time\n      if (fg.get('logFilePartitionTime').value == null || fg.get('logFilePartitionTime').value < 1) {\n        fg.get('logFilePartitionTime').setErrors({ 'incorrect': true });\n        fg.get('logFilePartitionSize').setErrors(null);\n      }\n    }\n    else if (fg.get('logFilePartitionTypeId').value == 2) {//size\n      if (fg.get('logFilePartitionSize').value == null || fg.get('logFilePartitionSize').value < 1) {\n        fg.get('logFilePartitionSize').setErrors({ 'incorrect': true });\n        fg.get('logFilePartitionTime').setErrors(null);\n      }\n    }\n    if (fg.get('logFileHoldTime').value == null || fg.get('logFileHoldTime').value < 1) {\n      fg.get('logFileHoldTime').setErrors({ 'incorrect': true });\n    }\n  }\n  else { //false , mean savelogfile donot tick\n    fg.get('logFilePartitionTypeId').setErrors(null);\n    fg.get('logFilePartitionTime').setErrors(null);\n    fg.get('logFilePartitionSize').setErrors(null);\n  }\n\n  if (testTypeId == 1 || testTypeId == 2) {\n    if (fg.get('usualCallDuration').value == null || fg.get('usualCallDuration').value < 1) {\n      fg.get('usualCallDuration').setErrors({ 'incorrect': true });\n    }\n    if (fg.get('usualCallWaitTime').value == null || fg.get('usualCallWaitTime').value < 1) {\n      fg.get('usualCallWaitTime').setErrors({ 'incorrect': true });\n    }\n    if (fg.get('usualCallNumber').value == null) {\n      fg.get('usualCallNumber').setErrors({ 'incorrect': true });\n    }\n  }\n  if (testTypeId == 2) {//MosCall\n    //check upload /Download DropDown\n    if (fg.get('testDataTypeId').value == null || fg.get('testDataTypeId').value == 0) {\n      fg.get('testDataTypeId').setErrors({ 'incorrect': true });\n    }\n    //check DataServerUrl\n    if (fg.get('testDataServer').value == null || fg.get('testDataServer').value == \"\") {\n      fg.get('testDataServer').setErrors({ 'incorrect': true });\n    }\n  }\n  if (testTypeId == 4) { //Data\n    if (fg.get('testDataId').value == null || fg.get('testDataId').value <= 0) {\n      fg.get('testDataId').setErrors({ 'incorrect': true });\n    }\n    if (fg.get('testDataServer').value == null || fg.get('testDataServer').value == \"\") {\n      fg.get('testDataServer').setErrors({ 'incorrect': true });\n    }\n\n    if (fg.get('testDataId').value == 1) { //Ftp\n      if (fg.get('testDataTypeId').value == null || fg.get('testDataTypeId').value == 0) {\n        fg.get('testDataTypeId').setErrors({ 'incorrect': true });\n      }\n      if (fg.get('testDataUserName').value == null || fg.get('testDataUserName').value == \"\") {\n        fg.get('testDataUserName').setErrors({ 'incorrect': true });\n      }\n      if (fg.get('testDataPassword').value == null || fg.get('testDataPassword').value == \"\") {\n        fg.get('testDataPassword').setErrors({ 'incorrect': true });\n      }\n    }\n    if (fg.get('testDataId').value == 2) { //Http\n      if (fg.get('testDataTypeId').value == null || fg.get('testDataTypeId').value == 0) {\n        fg.get('testDataTypeId').setErrors({ 'incorrect': true });\n      }\n      if (fg.get('testDataUploadFileSize').value == null || fg.get('testDataUploadFileSize').value == \"\") {\n        fg.get('testDataUploadFileSize').setErrors({ 'incorrect': true });\n      }\n      // if (fg.get('testDataDownloadFileAddress').value == null || fg.get('testDataDownloadFileAddress').value == \"\") {\n      //     fg.get('testDataDownloadFileAddress').setErrors({ 'incorrect': true });\n      // }\n      // if(fg.get('testDataTypeId').value == 2) { //Uploads\n      //     //fileSize Check\n      //     if( 100 > fg.get('testDataUploadFileSize').value  && fg.get('testDataUploadFileSize').value > 1000000){\n\n      //         fg.get('ttl').setErrors({ 'fileSizeRang': true });\n      //     }\n      // }\n    }\n    if (fg.get('testDataId').value == 3) {//ping\n\n      if (fg.get('numberOfPings').value == null || fg.get('numberOfPings').value < 1 || fg.get('numberOfPings').value > 100) {\n        fg.get('numberOfPings').setErrors({ 'incorrect': true });\n      }\n      if (fg.get('packetSize').value == null || fg.get('packetSize').value < 4 || fg.get('packetSize').value > 188) {\n        fg.get('packetSize').setErrors({ 'incorrect': true });\n      }\n      if (fg.get('internalTime').value == null || fg.get('internalTime').value < 1 || fg.get('internalTime').value > 20) {\n        fg.get('internalTime').setErrors({ 'incorrect': true });\n      }\n      if (fg.get('responseWaitTime').value == null || fg.get('responseWaitTime').value < 10 || fg.get('responseWaitTime').value > 100) {\n        fg.get('responseWaitTime').setErrors({ 'incorrect': true });\n      }\n      if (fg.get('ttl').value == null || fg.get('ttl').value < 16 || fg.get('ttl').value > 255) {\n        fg.get('ttl').setErrors({ 'incorrect': true });\n      }\n      if (fg.get('ipTypeId').value == null || fg.get('ipTypeId').value < 1) {\n        fg.get('ipTypeId').setErrors({ 'incorrect': true });\n      }\n    }\n    if (fg.get('testDataId').value == 4) {//TraceRoute\n      if (fg.get('traceRouteHubCount').value == null || fg.get('traceRouteHubCount').value < 1) {\n        fg.get('traceRouteHubCount').setErrors({ 'incorrect': true });\n      }\n    }\n  }\n  //Check Upload FileSize only Upload Data Test\n  if (testTypeId != 4) { //only Data Test\n    //fg.get('testDataUploadFileSize').setErrors(null);\n  }\n  else if (testTypeId == 4) {\n    if (fg.get('testDataId').value != 2) {//Only Http In Data Test\n      //fg.get('testDataUploadFileSize').setErrors(null);\n    }\n    else {\r\n      fg.get('testDataId').value == 2\n      if (fg.get('testDataTypeId').value != 2) { //Only Upload \n        //fg.get('testDataUploadFileSize').setErrors(null);\n      }\n    }\n  }\n  //End Check\n  if (testTypeId == 5) {\n    if (fg.get('ottServiceId').value == null || fg.get('ottServiceId').value < 1) {\n      fg.get('ottServiceId').setErrors({ 'incorrect': true });\n    }\n    if (fg.get('ottServiceTestId').value == null || fg.get('ottServiceTestId').value < 1) {\n      fg.get('ottServiceTestId').setErrors({ 'incorrect': true });\n    }\n  }\n  if (repeatTypeId == 2) {\n    if (fg.get('repeatTime').value == null) {\n      fg.get('repeatTime').setErrors({ 'incorrect': true });\n\n    }\n  }\n  if (repeatTypeId == 3) {\n    if (fg.get('repeatCount').value == null) {\n      fg.get('repeatCount').setErrors({ 'incorrect': true });\n\n    }\n  }\n\n};\n//این متد حداقل و حداکثر فایل آپلودی را چک میکد\n//سایز فایل برحسب کیلو بایت می باشد\nfunction fileSizeRangValidator(min: number, max: number): ValidatorFn {\n  return (control: AbstractControl): { [key: string]: boolean } | null => {\n    if (control.value !== undefined && (isNaN(control.value) || control.value < min || control.value > max)) {\n      return { 'fileSizeRang': true }\n    }\n    return null;\n  }\n}\n@Component({\n  selector: 'app-edit-defined-test',\n  templateUrl: './definedTestEdit.component.html',\n  styleUrls: ['./definedTestEdit.component.css']\n})\nexport class DefinedTestEditComponent implements OnInit {\n\n  public showloader: boolean = false;\n\n  definedTestForm: FormGroup;\n  formTitle = 'Create';\n  id: number;\n  errorMessage: any;\n  myAppUrl = '';\n  repeatTypeList: any[];//None, Time, Count\n  testTypeList: any[];//UsualCall, MosCall, Idle, Data, OTTServices\n  testDataList: any[];//FTP, HTTP, Ping, TraceRoute,...\n  testDataTypeList: any[];//Download, Upload    \n  oTTServiceList: any[];//Skype, WhatsApp, Instagram\n  oTTServiceTestList: any[];//VoiceCall, SendText, Pic\n  networkList: any[];//GSM Only, WCDMA Only, LTE Only, GSM + WCDMA, ...\n  bandList: any[];//7600, ...\n  logFilePartitionTypeList: any[];//Time/Size\n  iPTypeList: any[];//IPV4 or IPV6\n  testDataIdOptionValue: number;\n  testDataDirectionIdOptionValue: number = 1;\n  ottServiceTestIdOption: 1;\n  saveLogFileCheckValue: boolean;\n  logFilePartitionTypeCheckValue: number = 1;\n  testTypeIdOptionValue: number;\n  repeatTypeOptionValue: number;\n  iPTypeIdOptionValue: number;\n  traceRouteHubCount: number;\n\n  Editable: true;\n\n  breadcroumb = 'CreateTest';\n  testTitle = '';\n\n\n  constructor(private _http: HttpClient, private _fb: FormBuilder, private _avRoute: ActivatedRoute,\n    private _router: Router, @Inject('BASE_URL') baseUrl: string) {\n    const ipPattern = \"(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\";\n    const reg = '((https?://)?([\\\\da-z.-]+)\\\\.([a-z.]{2,6})[/\\\\w .-]*/?)|(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)';\n    if (this._avRoute.snapshot.params['id']) {\n      this.id = this._avRoute.snapshot.params['id'];\n    }\n    this.myAppUrl = baseUrl;\n    this.getConfigList('repeatType')\n      .subscribe((data: any) => { this.repeatTypeList = data });\n    this.getConfigList('testType')\n      .subscribe((data: any) => { this.testTypeList = data });\n    this.getConfigList('testData')\n      .subscribe((data: any) => { this.testDataList = data });\n    this.getConfigList('testDataType')\n      .subscribe((data: any) => { this.testDataTypeList = data });\n    this.getConfigList('oTTService')\n      .subscribe((data: any) => { this.oTTServiceList = data });\n    this.getConfigList('oTTServiceTest')\n      .subscribe((data: any) => { this.oTTServiceTestList = data });\n    this.getConfigList('network')\n      .subscribe((data: any) => { this.networkList = data });\n    this.getConfigList('band')\n      .subscribe((data: any) => { this.bandList = data });\n    this.getConfigList('logFilePartitionType')\n      .subscribe((data: any) => { this.logFilePartitionTypeList = data });\n    this.getConfigList('iPType')\n      .subscribe((data: any) => { this.iPTypeList = data });\n\n    function validateIsSpouse(group: FormGroup) {\r\n      let maritalStatus = group.get('maritalStatus').value;\r\n      if (maritalStatus == \"01\") {\r\n        return { isRequired: true };\r\n      }\r\n      return null;\r\n    }\n\n    this.definedTestForm = this._fb.group({\n      id: 0,\n      title: ['', Validators.required, this.validateUniqueTitle.bind(this)],\n      isActive: true,\n      layer3Messages: [false],\n      repeatTypeId: [1, [Validators.required, Validators.min(1)]],\n      repeatTime: [],\n      repeatCount: [],\n      measurementInterval: [5, [Validators.min(2), Validators.required]],\n      testTypeId: [1, [Validators.min(1), Validators.required]],\n      networkId: [2, [Validators.min(1), Validators.required]],\n      bandId: [0, [Validators.min(0), Validators.required]],\n\n      usualCallDuration: [],\n      usualCallWaitTime: [],\n      usualCallNumber: [''],\n      testDataTypeId: [0],\n      testDataId: [],\n\n      testDataServer: ['', [Validators.pattern(reg)]],\n      testDataUserName: [],\n      testDataPassword: [],\n      numberOfPings: [],\n      packetSize: [],\n      internalTime: [],\n      responseWaitTime: [],\n      ttl: [],\n      ipTypeId: [1],\n\n\n      testDataDownloadFileAddress: [],\n      testDataUploadFileSize: [20, [fileSizeRangValidator(0.1, 1000)]],\n      ottServiceId: [0],\n      ottServiceTestId: [],\n      saveLogFile: [false],\n      logFilePartitionTypeId: [],\n      logFilePartitionTime: [600],\n      logFilePartitionSize: [20],\n      logFileHoldTime: [240],\n      traceRouteHubCount: [],\n      repeatTypeTitle: [''],\n      testTypeTitle: [''],\n      testDataTypeTitle: [''],\n      ottServiceTitle: [''],\n      ottServiceTestTitle: [''],\n      networkTitle: [''],\n      bandTitle: [''],\n      logFilePartitionTypeTitle: [''],\n      ipTypeTitle: [''],\n      editable: true,\n    }, { validators: MyAwesomeRangeValidator });\n    this.saveLogFileCheckValue = this.definedTestForm.get('saveLogFile').value;\n    if (this.id > 0) {\n      this.formTitle = 'Edit';\n      this.breadcroumb = 'EditTest';\n\n      this.showloader = true;\n      this.getDefinedTestById(this.id)\n        .subscribe((response: DefinedTest) => {\n\n          this.testTitle = response['title'];\n\n          this.testDataIdOptionValue = response['testDataId'];\n          this.testDataDirectionIdOptionValue = response['testDataTypeId'];\n          this.definedTestForm.setValue(response);\n          this.ottServiceTestIdOption = 1;\n\n          this.showloader = false;\n\n        }, error => console.error(error))\n    };\n  }\n  ngOnInit() { }\n  onOptionsSelected(value: object) {\n    //console.log(\"the selected value is \" + value['target']['selectedIndex']);\n    var selectedtestDataId = this.testDataIdOptionValue = value['target']['selectedIndex'];\n    this.definedTestForm.get('testDataServer').setValue(null);\n    this.definedTestForm.get('numberOfPings').setValue(null);\n    this.definedTestForm.get('packetSize').setValue(null);\n    this.definedTestForm.get('internalTime').setValue(null);\n    this.definedTestForm.get('responseWaitTime').setValue(null);\n    this.definedTestForm.get('ttl').setValue(null);\n    this.definedTestForm.get('traceRouteHubCount').setValue(null);\n    if (selectedtestDataId == 3) {\n      this.definedTestForm.get('testDataServer').setValue('www.google.com');\n      this.definedTestForm.get('numberOfPings').setValue(4);\n      this.definedTestForm.get('packetSize').setValue(64);\n      this.definedTestForm.get('internalTime').setValue(20);\n      this.definedTestForm.get('responseWaitTime').setValue(100);\n      this.definedTestForm.get('ttl').setValue(255);\n      this.definedTestForm.get('ipTypeId').setValue(1);\n    }\n    if (selectedtestDataId == 4) {\n      this.definedTestForm.get('traceRouteHubCount').setValue(10);\n      this.definedTestForm.get('testDataServer').setValue('www.google.com');\n    }\n  }\n  onDirectionSelected(value: object) {\n    this.testDataDirectionIdOptionValue = value['target']['selectedIndex'];\n\n    if (this.testDataDirectionIdOptionValue == 2) {//Upload Selected\n      this.definedTestForm.get('testDataServer').setValue('185.192.112.74');\n    }\n    else { //Download Selected\n      this.definedTestForm.get('testDataServer').setValue(null);\n    }\n    //In MosCall Test\n    if (this.testTypeId.value == 2) {\n      if (value[\"target\"][\"selectedIndex\"] == 1) { //downlink\n        this.definedTestForm.get('usualCallNumber').setValue(\"02186121407\");\n      }\n      if (value[\"target\"][\"selectedIndex\"] == 2) {//uplink\n        this.definedTestForm.get('usualCallNumber').setValue(\"02186121406\");\n      }\n    }\n  }\n  onTestTypeOptionsSelected(value: object) {\n    var selectedTestTypeId = value['target']['selectedIndex'];\n    this.definedTestForm.get('usualCallDuration').setValue(null);\n    this.definedTestForm.get('usualCallWaitTime').setValue(null);\n    this.definedTestForm.get('usualCallNumber').setValue(null);\n    this.definedTestForm.get('saveLogFile').setValue(false);\n    this.definedTestForm.get('testDataServer').setValue(null);\n    if (selectedTestTypeId == 1/*call*/) {\n      this.definedTestForm.get('usualCallDuration').setValue(45);\n      this.definedTestForm.get('usualCallWaitTime').setValue(5);\n      this.definedTestForm.get('usualCallNumber').setValue(\"982181713999\");\n      this.definedTestForm.get('saveLogFile').setValue(true);\n    }\n    if (selectedTestTypeId == 2/*Moscall*/) {\n      this.definedTestForm.get('testDataId').setValue(0);//TransferType\n      this.definedTestForm.get('testDataTypeId').setValue(0); //TransferDirection\n      this.definedTestForm.get('usualCallDuration').setValue(20);\n      this.definedTestForm.get('usualCallWaitTime').setValue(10);\n      this.definedTestForm.get('usualCallNumber').setValue(\"02186121407\");\n      this.definedTestForm.get('saveLogFile').setValue(false);\n    }\n    if (selectedTestTypeId == 3/*Idle*/) {\n      this.definedTestForm.get('saveLogFile').setValue(true);\n      this.definedTestForm.get('usualCallDuration').setValue(45);\n      this.definedTestForm.get('usualCallNumber').setValue(\"02181713999\");\n      this.definedTestForm.get('usualCallWaitTime').setValue(5);\n    }\n    if (selectedTestTypeId == 4/*data*/) {\n      this.definedTestForm.get('testDataId').setValue(0);//TransferType\n      this.definedTestForm.get('testDataTypeId').setValue(0); //TransferDirection\n    }\n  }\n  save() {\n    if (!this.definedTestForm.valid) {\n      return;\n    }\n    /** هر مسیری کاربر وارد کند در حالت آپلود توکن \n     * Upload\n     * به ابتدای \n     * TestDataDownloadFileAddress\n     * اضافه خواهد شد. چون اکشن آپلود فایل می باشد.\n     */\n\n    if (this.definedTestForm.value.usualCallNumber) {\r\n      this.definedTestForm.get('usualCallNumber').setValue(this.definedTestForm.value.usualCallNumber.toString());\n    }\n\n    if (\n      this.definedTestForm.get('testDataDownloadFileAddress').value != null &&\n      (\n        (this.definedTestForm.get('testTypeId').value == 4 && /*Data */\n          this.definedTestForm.get('testDataId').value == 2 &&   /*Http */\n          this.definedTestForm.get('testDataTypeId').value == 2) /*Upload*/\n      )\n    ) {\n      var curvar = this.definedTestForm.get('testDataDownloadFileAddress').value;\n      if (curvar == \"\" || curvar == null) {\n        this.definedTestForm.get('testDataDownloadFileAddress').setValue('Uploads/');\n      }\n      else {\n        curvar = curvar.replace('/', '').replace('\\\\', ''); //اگر کاربر ، کاراکتر وارد کرده بود، حذف شود\n        this.definedTestForm.get('testDataDownloadFileAddress').setValue('Uploads/' + curvar);\n      }\n    }\n    if (this.definedTestForm.get('testTypeId').value == 2/*moscall */) {\n      //در تست موس کال در نهایت یک فایل بر روی سرور آپلود میشود\n      // if(this.definedTestForm.get('testDataTypeId').value==2)/**Upload */ {\n      var curvar = this.definedTestForm.get('testDataDownloadFileAddress').value;\n      if (curvar == \"\" || curvar == null) {\n        this.definedTestForm.get('testDataDownloadFileAddress').setValue('Uploads/');\n      }\n      else {\n        curvar = curvar.replace('/', '').replace('\\\\', ''); //اگر کاربر ، کاراکتر وارد کرده بود، حذف شود\n        this.definedTestForm.get('testDataDownloadFileAddress').setValue('Uploads/' + curvar);\n      }\n\n\n      //}\n    }\n    if (this.formTitle === 'Create') {\n      this.saveMachine(this.definedTestForm.value)\n        .subscribe(() => {\n          this._router.navigate(['/Test']);\n        },\n          error => console.log(error));\n    } else if (this.formTitle === 'Edit') {\n      this.updateMachine(this.definedTestForm.value)\n        .subscribe(() => {\n          this._router.navigate(['/Test']);\n        }, error => console.error(error));\n    }\n  }\n  cancel() {\n    this._router.navigate(['/Test']);\n  }\n  getDefinedTestById(id: number) {\n    return this._http.get(this.myAppUrl + 'api/DefinedTest/Details/' + id)\n      .pipe(map(\n        response => {\n          return response;\n        }));\n  }\n  saveMachine(definedTest: DefinedTest) {\n    return this._http.post(this.myAppUrl + 'api/DefinedTest/Create', definedTest)\n      .pipe(map(\n        response => {\n          return response;\n        }));\n  }\n  updateMachine(definedTest: DefinedTest) {\n    return this._http.put(this.myAppUrl + 'api/DefinedTest/Edit', definedTest)\n      .pipe(map(\n        response => {\n          return response;\n        }));\n  }\n  getConfigList(configName: string) {\n    return this._http.get(this.myAppUrl + 'api/Config/GetConfigDatas/' + configName)\n      .pipe(map(\n        response => {\n          return response;\n        }));\n  }\n  validateUniqueTitle(control: AbstractControl) {\n    return this._http.get(this.myAppUrl + 'api/DefinedTest/CheckTitle?title=' + control.value)\n      .pipe(map(\n        response => {\n          if (this.formTitle != 'Edit') {\n            if (response['id'] > 0) {\n              return { titleExist: true };\n            }\n            else { return null }\n          }\n          else {  //this.formTitle=='Edit'\n            if (response['id'] > 0) { // object from server Exist\n              if (response['id'] == this.id) { //id from api equal by selectedRow Id\n                return null;\n              }\n              else {\n                return { titleExist: true };\n              }\n            }\n          }\n        }));\n  }\n\n  get title() { return this.definedTestForm.get('title'); }\n  get isActive() { return this.definedTestForm.get('isActive'); }\n  get layer3Messages() { return this.definedTestForm.get('layer3Messages'); }\n  get repeatTypeId() { return this.definedTestForm.get('repeatTypeId'); }\n  get repeatTime() { return this.definedTestForm.get('repeatTime'); }\n  get repeatCount() { return this.definedTestForm.get('repeatCount'); }\n  get measurementInterval() { return this.definedTestForm.get('measurementInterval'); }\n  get testTypeId() { return this.definedTestForm.get('testTypeId'); }\n  get usualCallDuration() { return this.definedTestForm.get('usualCallDuration'); }\n  get usualCallWaitTime() { return this.definedTestForm.get('usualCallWaitTime'); }\n  get usualCallNumber() { return this.definedTestForm.get('usualCallNumber'); }\n  get testDataId() { return this.definedTestForm.get('testDataId'); }\n  get testDataTypeId() { return this.definedTestForm.get('testDataTypeId'); }\n  get testDataServer() { return this.definedTestForm.get('testDataServer'); }\n  get testDataUserName() { return this.definedTestForm.get('testDataUserName'); }\n  get testDataPassword() { return this.definedTestForm.get('testDataPassword'); }\n  get testDataDownloadFileAddress() { return this.definedTestForm.get('testDataDownloadFileAddress'); }\n  get testDataUploadFileSize() { return this.definedTestForm.get('testDataUploadFileSize'); }\n  get ipTypeId() { return this.definedTestForm.get('ipTypeId'); }\n  get ottServiceId() { return this.definedTestForm.get('ottServiceId'); }\n  get ottServiceTestId() { return this.definedTestForm.get('oTTServiceTestId'); }\n  get networkId() { return this.definedTestForm.get('networkId'); }\n  get bandId() { return this.definedTestForm.get('bandId'); }\n  get saveLogFile() { return this.definedTestForm.get('saveLogFile'); }\n  get logFilePartitionTypeId() { return this.definedTestForm.get('logFilePartitionTypeId'); }\n  get logFilePartitionTime() { return this.definedTestForm.get('logFilePartitionTime'); }\n  get logFilePartitionSize() { return this.definedTestForm.get('logFilePartitionSize'); }\n  get logFileHoldTime() { return this.definedTestForm.get('logFileHoldTime'); }\n  get numberOfPings() { return this.definedTestForm.get('numberOfPings'); }\n  get packetSize() { return this.definedTestForm.get('packetSize'); }\n  get internalTime() { return this.definedTestForm.get('internalTime'); }\n  get responseWaitTime() { return this.definedTestForm.get('responseWaitTime'); }\n  get ttl() { return this.definedTestForm.get('ttl'); }\n  get TraceRouteHubCount() { return this.definedTestForm.get('traceRouteHubCount'); }\n}\n\n","module.exports = \".leftAlign {\\r\\n  text-align: left;\\r\\n}\\r\\n\\r\\n.gridbutton {\\r\\n  margin: 1px 2px;\\r\\n}\\r\\n\\r\\n.gridIcon {\\r\\n  font-size: 20px;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdGVzdC9kZWZpbmVkVGVzdEdyb3VwQXNzaWdubWVudC9kZWZpbmVkVGVzdEdyb3VwQXNzaWdubWVudC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLGVBQWU7QUFDakIiLCJmaWxlIjoic3JjL2FwcC90ZXN0L2RlZmluZWRUZXN0R3JvdXBBc3NpZ25tZW50L2RlZmluZWRUZXN0R3JvdXBBc3NpZ25tZW50LmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIubGVmdEFsaWduIHtcclxuICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG59XHJcblxyXG4uZ3JpZGJ1dHRvbiB7XHJcbiAgbWFyZ2luOiAxcHggMnB4O1xyXG59XHJcblxyXG4uZ3JpZEljb24ge1xyXG4gIGZvbnQtc2l6ZTogMjBweDtcclxufVxyXG4iXX0= */\"","import { Sort, MatSort } from '@angular/material/sort';\nimport { PaginationInstance } from 'ngx-pagination';\nimport { Component, Inject, ViewChild} from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { LanguageService } from '../../Shared/services/Language.service';\r\n\nexport interface UserData {\n  id: number;\n  definedTestTitle: string;\n  testTypeTitle: string;\n  beginDate: string;\n  endDate: string;\n  status: boolean;\n}\n\n\n@Component({\n    selector: 'app-defined-test-group-assignment',\n    templateUrl: './definedTestGroupAssignment.component.html',\n    styleUrls: ['./definedTestGroupAssignment.component.css']\n})\nexport class DefinedTestGroupAssignmentComponent {\n\n  displayedColumns: string[] = ['index', 'definedTestTitle', 'testTypeTitle', 'beginDate', 'endDate'/*, 'status'*/, 'actions'];\n  dataSource: MatTableDataSource<UserData>;\n\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\n\n    FormTitle = 'Edit';\n    filter:string='';\n    groupId: number;\n    groupTitle:string;\n    errorMessage: any;\n    myAppUrl = '';\n    definedTestMachineGroupList: any;\n    selectedRow: number;    \n    selectedId: number;\n    canEdit:boolean=true;\n   \n  constructor(\n    private _http: HttpClient,\n    private _avRoute: ActivatedRoute,\n    private langService: LanguageService,\n    @Inject('BASE_URL') baseUrl: string\n  ) {\n       \n        if (this._avRoute.snapshot.params['id']) {\n            this.groupId = this._avRoute.snapshot.params['id'];\n            this.groupTitle = this._avRoute.snapshot.params['Title'];\n        }\n        this.myAppUrl = baseUrl;\n        this.getDefinedTests(this.groupId);\n    }\n  \n    getDefinedTests(id:number){\n        this._http.get(this.myAppUrl + 'api/MachineGroup/IndexWithDefinedTest/'+id).pipe(map(\n            response => {\n                return response;\n            }\n        )).subscribe(\n            (data) => {\n            this.definedTestMachineGroupList = data;\n\n            this.dataSource = new MatTableDataSource(<any>data);\r\n            this.dataSource.paginator = this.paginator;\r\n            this.dataSource.sort = this.sort;\n            }\n        );\n    }\n\n\n  applyFilter(event: Event) {\r\n    const filterValue = (event.target as HTMLInputElement).value;\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n\r\n    if (this.dataSource.paginator) {\r\n      this.dataSource.paginator.firstPage();\r\n    }\r\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3Rlc3QvZGVmaW5lZFRlc3RHcm91cEFzc2lnbm1lbnRFZGl0L2RlZmluZWRUZXN0R3JvdXBBc3NpZ25tZW50RWRpdC5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit, Injectable, Inject } from '@angular/core';\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { DefinedTestGroup } from '../../Shared/models/definedTestGroup';\nimport { NgbCalendar, NgbDatepickerI18n, NgbCalendarPersian, NgbDateStruct, NgbTimeStruct } from '@ng-bootstrap/ng-bootstrap';\nimport { NgbDatepickerI18nPersian } from '../../Shared/services/NgbDatepickerI18nPersian';\nimport { ToastrService } from 'ngx-toastr';\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\n// only used for modal\r\ndeclare var $: any;\r\n\r\n@Component({\n  selector: 'app-edit-defined-test-group-assignment',\n  templateUrl: './definedTestGroupAssignmentEdit.component.html',\n  styleUrls: ['./definedTestGroupAssignmentEdit.component.css'],\n  providers: [\n    { provide: NgbCalendar, useClass: NgbCalendarPersian },\n    { provide: NgbDatepickerI18n, useClass: NgbDatepickerI18nPersian }\n  ]\n})\nexport class DefinedTestGroupAssignmentEditComponent implements OnInit {\n\n  public showloader: boolean = false;\r\n\n  definedTestGroupForm: FormGroup;\n  formTitle = 'Create';\n  machineGroupId: number;\n  GroupTitle: string;\n  errorMessage: any;\n  myAppUrl = '';\n  definedTestList: any;\n  id = 0;\n  endDate: NgbDateStruct;\n  beginDate: NgbDateStruct;\n  beginDateTime: NgbTimeStruct;\n  endDateTime: NgbTimeStruct;\n  defaultDate: Date;\n  //defaultDate: NgbDateStruct;\n\n  breadcroumb = 'AssignTestToGroup';\n\n  ReplaceTestConfirmMessage = \"\";\n\n  //defaultTime: NgbTimeStruct;\n  constructor(\n    private _http: HttpClient,\n    private _fb: FormBuilder,\n    private _avRoute: ActivatedRoute,\n    private _router: Router,\n    @Inject('BASE_URL') baseUrl: string,\n    private toastrService: ToastrService,\n    private translate: TranslateService\n  ) {\n    this.getDefinedTestList().subscribe(\n      (data) => {\n        this.definedTestList = data\n      }\n    );\n    this.definedTestGroupForm = this._fb.group({\n      id: 0,\n      definedTestId: [0, [Validators.required, Validators.min(1)]],\n      isActive: [true, [Validators.required]],\n      machineGroupId: [0],\n      beginDate: [, Validators.required],\n      endDate: [, Validators.required],\n      sim: [0, [Validators.required, Validators.min(1)]],\n      beginDateTime: [/*this.defaultTime*/, Validators.required],\n      endDateTime: [/*this.defaultTime*/, Validators.required],\n      bDate: [],\n      eDate: []\n    })\n    if (this._avRoute.snapshot.params['id']) {\n      if (this._avRoute.snapshot.params['id'].indexOf(',') == -1) {\n        this.machineGroupId = this._avRoute.snapshot.params['id'];\n        this.GroupTitle = this._avRoute.snapshot.params['Title'];\n      }\n      else {\n        this.machineGroupId = this._avRoute.snapshot.params['id'].split(\",\")[0];\n        this.id = this._avRoute.snapshot.params['id'].split(\",\")[1];\n        this.GroupTitle = this._avRoute.snapshot.params['Title'];\n      }\n\n      if (this.id > 0) {\n        this.formTitle = 'Edit';\n        this.breadcroumb = 'EditGroupTest';\n\n        this.showloader = true;\n\n        this.getDefinedTestGroupById(this.id)\n          .subscribe((response: DefinedTestGroup) => {\n\n            //this.definedTestGroupForm.setValue(response[0]);\n\n            this.definedTestGroupForm.controls['id'].setValue(response[\"id\"]);\n            this.definedTestGroupForm.controls['definedTestId'].setValue(response[\"definedTestId\"]);\n            this.definedTestGroupForm.controls['isActive'].setValue(response[\"isActive\"]);\n            this.definedTestGroupForm.controls['machineGroupId'].setValue(response[\"machineGroupId\"]);\n            this.definedTestGroupForm.controls['sim'].setValue(response[\"sim\"]);\n\n\n            this.definedTestGroupForm.controls['beginDate'].setValue(response[\"bDate\"]);\n            this.definedTestGroupForm.controls['endDate'].setValue(response[\"eDate\"]);\n\n            var bdate = new Date(response[\"bDate\"]);\n            var btime = ('00' + bdate.getHours()).substr(-2) + \":\" + ('00' + bdate.getMinutes()).substr(-2)\n            this.definedTestGroupForm.controls['beginDateTime'].setValue(btime);\n\n\n            var edate = new Date(response[\"eDate\"]);\n            var etime = ('00' + edate.getHours()).substr(-2) + \":\" + ('00' + edate.getMinutes()).substr(-2);\n            this.definedTestGroupForm.controls['endDateTime'].setValue(etime);\n\n            this.showloader = false;\n\n          }, error => console.error(error))\n      }\n      else {\n        //this.definedTestGroupForm.controls['beginDate'].setValue(this.defaultDate);\n        //this.definedTestGroupForm.controls['endDate'].setValue(this.defaultDate);\n        //this.definedTestGroupForm.controls['beginDateTime'].setValue(this.defaultTime);\n        //this.definedTestGroupForm.controls['endDateTime'].setValue(this.defaultTime);\n\n        var defaultDate = new Date();\r\n        var defaultTime = ('00' + defaultDate.getHours()).substr(-2) + \":\" + ('00' + defaultDate.getMinutes()).substr(-2);\r\n        //this.definedTestGroupForm.controls['beginDate'].setValue(defaultDate);\r\n        //this.exportForm.controls['endDate'].setValue(defaultDate);\r\n        this.definedTestGroupForm.controls['beginDateTime'].setValue(defaultTime);\r\n        this.definedTestGroupForm.controls['endDateTime'].setValue(defaultTime);\n      }\n    }\n    this.myAppUrl = baseUrl;\n  }\n  ngOnInit() {\n    if (this.id > 0) {\n      //this.definedTestGroupForm.get('definedTestId').disable();\n      //this.definedTestGroupForm.get('beginDate').disable();\n      //this.definedTestGroupForm.get('endDate').disable();\n      //this.definedTestGroupForm.get('sim').disable();\n      //this.definedTestGroupForm.get('beginDateTime').disable();\n      //this.definedTestGroupForm.get('endDateTime').disable();\n    }\n  }\n  getDefinedTestGroupById(id: number) {\n    return this._http.get(this.myAppUrl + 'api/DefinedTestMachineGroup/Details/' + id)\n      .pipe(map(\n        response => {\n          return response;\n        }));\n  }\n  save() {\n    if (!this.definedTestGroupForm.valid) {\n      return;\n    }\n    else\n    {\n      if (!this.definedTestGroupForm.controls['beginDate'].valid || this.definedTestGroupForm.controls['beginDate'].value == null) {\n        this.toastrService.error(this.translate.instant('BeginDateIsRequired'), this.translate.instant('Error'));\n        return;\n      }\n      if (!this.definedTestGroupForm.controls['endDate'].valid || this.definedTestGroupForm.controls['endDate'].value == null) {\n        this.toastrService.error(this.translate.instant('EndDateIsRequired'), this.translate.instant('Error'));\n        return;\n      }\n\n      var TDate = new Date();\n      var BDate;\n      var EDate;\n\n\n      if (localStorage.getItem('Language') == 'ar') {\n        BDate = this.definedTestGroupForm.controls['beginDate'].value._d;\r\n        EDate = this.definedTestGroupForm.controls['endDate'].value._d;\n      }\n      else {\n        BDate = this.definedTestGroupForm.controls['beginDate'].value;\r\n        EDate = this.definedTestGroupForm.controls['endDate'].value;\n      }\n\n      if (BDate) {\r\n        var BOTime = this.definedTestGroupForm.controls['beginDateTime'].value.split(':');\r\n        BDate.setHours(BOTime[0], BOTime[1], 0, 0);\r\n      }\n\n      if (EDate) {\r\n        var EOTime = this.definedTestGroupForm.controls['endDateTime'].value.split(':');\r\n        EDate.setHours(EOTime[0], EOTime[1], 0, 0);\r\n      }\n\n\n      if (TDate >= BDate) {\n        this.toastrService.error(this.translate.instant('BeginDateShouldBeGreaterThanCurrentDate'), this.translate.instant('Error'));\n\n        return;\n      }\n\n      if (BDate >= EDate) {\n        this.toastrService.error(this.translate.instant('EndDateShouldBeGreaterThanBeginDate'), this.translate.instant('Error'));\n        return;\r\n      }\n\n    }\n    if (this._avRoute.snapshot.params['id'].indexOf(',') == -1) { //create\n      this.definedTestGroupForm.controls['machineGroupId'].setValue(this._avRoute.snapshot.params['id']);\n    }\n    else {\n      this.definedTestGroupForm.controls['machineGroupId'].setValue(this._avRoute.snapshot.params['id'].split(\",\")[0]);\n      this.definedTestGroupForm.controls['id'].setValue(this._avRoute.snapshot.params['id'].split(\",\")[1]);\n      // this.definedTestGroupForm.controls['sim'].setValue(this.definedTestGroupForm.get('sim').value);\n      // this.definedTestGroupForm.controls['definedTestId'].setValue(this.definedTestGroupForm.get('definedTestId').value);\n    }\n\n    this.showloader = true;\n\n    if (localStorage.getItem('Language') == 'ar') {\n\n      if (this.definedTestGroupForm.controls['beginDate'].value._d == undefined) {\r\n        var temp = new Date(this.definedTestGroupForm.controls['beginDate'].value);\r\n        this.definedTestGroupForm.controls['bDate'].setValue(temp.toLocaleDateString());\r\n      }\n      else\n        this.definedTestGroupForm.controls['bDate'].setValue(this.definedTestGroupForm.controls['beginDate'].value._d.toLocaleDateString());\n\n\n      if (this.definedTestGroupForm.controls['endDate'].value._d == undefined) {\r\n        var temp = new Date(this.definedTestGroupForm.controls['endDate'].value);\r\n        this.definedTestGroupForm.controls['eDate'].setValue(temp.toLocaleDateString());\r\n      }\n      else\n        this.definedTestGroupForm.controls['eDate'].setValue(this.definedTestGroupForm.controls['endDate'].value._d.toLocaleDateString());\n\n    }\n    else {\r\n\r\n      if (this.definedTestGroupForm.controls['beginDate'].value.toLocaleDateString == undefined) {\r\n\r\n        var temp = new Date(this.definedTestGroupForm.controls['beginDate'].value);\r\n        this.definedTestGroupForm.controls['bDate'].setValue(temp.toLocaleDateString());\r\n      }\r\n      else\r\n        this.definedTestGroupForm.controls['bDate'].setValue(this.definedTestGroupForm.controls['beginDate'].value.toLocaleDateString());\n\n      if (this.definedTestGroupForm.controls['endDate'].value.toLocaleDateString == undefined) {\r\n\r\n        var temp = new Date(this.definedTestGroupForm.controls['endDate'].value);\r\n        this.definedTestGroupForm.controls['eDate'].setValue(temp.toLocaleDateString());\r\n      }\r\n      else\r\n        this.definedTestGroupForm.controls['eDate'].setValue(this.definedTestGroupForm.controls['endDate'].value.toLocaleDateString());\n    }\n\n\n    if (this.formTitle === 'Create') {\n      //بررسی وجود تست برای حد اقل یکی از دستگاه های گروه و پدرهای گروه\n      //اگر تست وجود داشت نمایش پیغام به کاربر و دریافت تایید برای ذخیره\n      //اگر کاربر تایید کرد متد ذخیره را فراخوانی می کنیم\n\n      this.IsDefinedTestForMachineGroupAndParent(this.definedTestGroupForm.value)\n        .subscribe((result) => {\n\n          this.showloader = false;\n\n          if (result == 0) {\n\n            this.showloader = true;\n\n            //بررسی وجود تست انفرادی برای همه دستگاه های گروه\n            this.IsDefinedTestForMachineAndParent(this.definedTestGroupForm.value)\n              .subscribe((mustBeDeactivateTestNumber) => {\n\n                this.showloader = true;\n\n                if (mustBeDeactivateTestNumber == 0) {\n                  this.saveDefinedTestGroup(this.definedTestGroupForm.value)\n                    .subscribe(() => {\n\n                      this.showloader = false;\n                      this._router.navigate(['/Test/Group/Assignment/' + this.machineGroupId, this.GroupTitle]);\n                    }, error => console.error(error));\n                }\n                else {\n\n                  this.showloader = false;\n                  $('#modal-default').modal('show');\n                  this.ReplaceTestConfirmMessage = this.translate.instant('InterferenceTestDateRangeConfirmMessage');\n                }\n              });\n          }\n          else {\n\n            this.showloader = false;\n            $('#modal-default').modal('show');\n            this.ReplaceTestConfirmMessage = this.translate.instant('InterferenceGroupTestDateRangeConfirmMessage');\n          }\n        }, error => console.error(error));\n    }\n    else if (this.formTitle === 'Edit') {\n\n      this.updateDefinedTestGroup(this.definedTestGroupForm.value)\n        .subscribe(() => {\n\n          this.showloader = false;\n          this._router.navigate(['/Test/Group/Assignment/' + this.machineGroupId, this.GroupTitle]);\n        }, error => console.error(error));\n    }\n  }\n  cancel() {\n    this._router.navigate(['/Test/Group/Assignment/', this.machineGroupId, this.GroupTitle]);\n  }\n  getDefinedTestList() {\n    return this._http.get(this.myAppUrl + 'api/DefinedTest/index/')\n      .pipe(map(\n        response => {\n          return response;\n        }));\n  }\n  getDefaultDateTime() {\n    return this._http.get(this.myAppUrl + 'api/DefinedTestMachineGroup/DefaultDateTime/')\n      .pipe(map(\n        response => {\n          return response;\n        }));\n  }\n  saveDefinedTestGroup(definedTestGroup: DefinedTestGroup) {\n    return this._http.post(this.myAppUrl + 'api/DefinedTestMachineGroup/Create', definedTestGroup)\n      .pipe(map(\n        response => {\n          return response;\n        }));\n  }\n  updateDefinedTestGroup(definedTestGroup: DefinedTestGroup) {\n    return this._http.put(this.myAppUrl + 'api/DefinedTestMachineGroup/Edit', definedTestGroup)\n      .pipe(map(\n        response => {\n          return response;\n        }));\n  }\n\n\n  AcceptConfirm() {\n\r\n    //فراخانی متد غیرفعال سازی تست های انفرادی و ذخیره تست گروهی\n    this.DeactivateTestForMachineAndDefinedTestMachineGroup(this.definedTestGroupForm.value)\n      .subscribe(() => {\r\n\r\n        $('#modal-default').modal('hide');\n        this.showloader = true;\n        this._router.navigate(['/Test/Group/Assignment/' + this.machineGroupId, this.GroupTitle]);\n      });\r\n\n  }\n\n  IsDefinedTestForMachineGroupAndParent(definedTestGroup: DefinedTestGroup) {\n    return this._http.post(this.myAppUrl + 'api/DefinedTestMachineGroup/IsDefinedTestForMachineGroupAndParent', definedTestGroup)\n      .pipe(map(\n        response => {\n          return response;\n        }));\n  }\n\n  IsDefinedTestForMachineAndParent(definedTestGroup: DefinedTestGroup) {\n    return this._http.post(this.myAppUrl + 'api/DefinedTestMachineGroup/IsDefinedTestForMachineParent', definedTestGroup)\n      .pipe(map(\n        response => {\n          return response;\n        }));\n  }\n\n  DeactivateTestForMachineInGroupAndParent(definedTestGroup: DefinedTestGroup) {\n    return this._http.post(this.myAppUrl + 'api/DefinedTestMachineGroup/DeactivateTestForMachineInGroupAndParent', definedTestGroup)\n      .pipe(\n        response => {\n          return response;\n        });\n  }\n\n  DeactivateTestForMachineAndDefinedTestMachineGroup(definedTestGroup: DefinedTestGroup) {\n    return this._http.post(this.myAppUrl + 'api/DefinedTestMachineGroup/DeactivateTestForMachineAndDefinedTestMachineGroup', definedTestGroup)\n      .pipe(map(\n        response => {\n          return response;\n        }));\n  }\n\n  get definedTestId() { return this.definedTestGroupForm.get('definedTestId'); }\n  get isActive() { return this.definedTestGroupForm.get('isActive'); }\n  get sim() { return this.definedTestGroupForm.get('sim'); }\n\n  // convenience getter for easy access to form fields\r\n  get f() { return this.definedTestGroupForm.controls; }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3Rlc3QvZGVmaW5lZFRlc3RNYWNoaW5lQXNzaWdubWVudC9kZWZpbmVkVGVzdE1hY2hpbmVBc3NpZ25tZW50LmNvbXBvbmVudC5jc3MifQ== */\"","import { NgbCalendarPersian, NgbCalendar, NgbDateStruct, NgbTimeStruct } from '@ng-bootstrap/ng-bootstrap';\nimport { Component, OnInit, Inject, ViewChild } from '@angular/core';\nimport { ActivatedRoute} from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { LanguageService } from '../../Shared/services/Language.service';\r\n\nexport interface UserData {\n  id: number;\n  definedTestTitle: string;\n  testTypeTitle: string;\n  beginDate: string;\n  endDate: string;\n  status: boolean;\n}\n\n@Component({\n  selector: 'app-defined-test-machine-assignment',\n  templateUrl: './definedTestMachineAssignment.component.html',\n  styleUrls: ['./definedTestMachineAssignment.component.css'],\n  providers: [\n    { provide: NgbCalendar, useClass: NgbCalendarPersian }]\n})\nexport class DefinedTestMachineAssignmentComponent implements OnInit {\n\n  displayedColumns: string[] = ['index', 'definedTestTitle', 'testTypeTitle', 'beginDate', 'endDate','status', 'actions'];\n  dataSource: MatTableDataSource<UserData>;\n\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\n\n\n  FormTitle = 'Edit';\n  machinId: number;\n  errorMessage: any;\n  myAppUrl = '';\n  definedTestMachineList: any;\n  selectedRow: number;\n  selectedId: number;\n  MachineTitle: string;\n  currentDate: number;\n  currentTime: number;\n  constructor(private _http: HttpClient,\n    private _avRoute: ActivatedRoute,\n    private langService: LanguageService,\n    @Inject('BASE_URL') baseUrl: string\n  ) {\n    if (this._avRoute.snapshot.params['id']) {\n      this.machinId = this._avRoute.snapshot.params['id'];\n      this.MachineTitle = this._avRoute.snapshot.params['Title'];\n    }\n    this.myAppUrl = baseUrl;\n    this.getDefinedTests(this.machinId);\n    var currentDate = new Date();\n    var ngbCurrentDate: NgbDateStruct = { day: currentDate.getUTCDate(), month: currentDate.getUTCMonth() + 1, year: currentDate.getUTCFullYear() };\n    var ngbCurrenTime: NgbTimeStruct = { hour: currentDate.getUTCHours(), minute: currentDate.getUTCMinutes(), second: currentDate.getUTCSeconds() };\n\n    // this.currentDate = this.calendar.getToday().year+this.calendar.getToday().month+this.calendar.getToday().day+\n    //                    currenTime.getHours()+ currenTime.getMinutes() + currenTime.getSeconds(); \n    this.currentDate = ngbCurrentDate.day + ngbCurrentDate.month + ngbCurrentDate.year;\n    this.currentTime = ngbCurrenTime.hour + ngbCurrenTime.minute + ngbCurrenTime.second;\n\n  }\n  getDefinedTests(id: number) {\n    this._http.get(this.myAppUrl + 'api/Machine/IndexWithDefinedTest/' + id).pipe(map(\n      (response: any[]) => {\n        response.forEach((element) => {\n          var bdDate = (+element['beginDate'].slice(0, 4)) + (+element['beginDate'].slice(5, 7)) + (+element['beginDate'].slice(8, 10));\n          var bdTime = (+element['beginDate'].slice(11, 13)) + (+element['beginDate'].slice(14, 16)) + (+element['beginDate'].slice(17, 19));\n          var edDate = (+element['endDate'].slice(0, 4)) + (+element['endDate'].slice(5, 7)) + (+element['endDate'].slice(8, 10));\n          var edTime = (+element['endDate'].slice(11, 13)) + (+element['endDate'].slice(14, 16)) + (+element['endDate'].slice(17, 19));\n\n          var NotReceivedByDevice = \"NotReceivedByDevice\";\n          var Waiting = \"Waiting\";\n          var Running = \"Running\";\n          var Finished = \"Finished\";\n\n          if (element[\"status\"] == false) {\n            element[\"status\"] = NotReceivedByDevice;\n          }\n\n          if (element[\"status\"] == true && bdDate > this.currentDate) {\n            element[\"status\"] = Waiting;\n          }\n          if (element[\"status\"] == true && bdDate == this.currentDate) {\n            if (bdTime > this.currentTime) {\n              element[\"status\"] = Waiting;\n            }\n          }\n\n          if (element[\"status\"] == true) {\n            if (bdDate < this.currentDate) {\n              if (this.currentDate < edDate) {\n                element[\"status\"] = Running;\n              }\n            }\n            else if (bdDate == this.currentDate) {\n              if (bdTime < this.currentTime) {\n                if (this.currentDate < edDate) {\n                  element[\"status\"] = Running;\n                }\n                else if (this.currentDate == edDate) {\n                  if (this.currentTime < edTime) {\n                    element[\"status\"] = Running;\n                  }\n                }\n              }\n            }\n          }\n          if (element[\"status\"] == true && (this.currentDate > edDate)) {\n            element[\"status\"] = Finished;\n          }\n          if (element[\"status\"] == true && (this.currentDate == edDate)) {\n            if (this.currentTime > edTime) {\n              element[\"status\"] = Finished;\n            }\n          }\n\n        });\n        return response;\n      }\n    )).subscribe(\n      (data) => {\n        this.definedTestMachineList = data;\n\n        this.dataSource = new MatTableDataSource(<any>data);\r\n        this.dataSource.paginator = this.paginator;\r\n        this.dataSource.sort = this.sort;\n      });\n  }\n\n\n  \n\n  applyFilter(event: Event) {\r\n    const filterValue = (event.target as HTMLInputElement).value;\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n\r\n    if (this.dataSource.paginator) {\r\n      this.dataSource.paginator.firstPage();\r\n    }\r\n  }\n  ngOnInit() { }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3Rlc3QvZGVmaW5lZFRlc3RNYWNoaW5lQXNzaWdubWVudEVkaXQvZGVmaW5lZFRlc3RNYWNoaW5lQXNzaWdubWVudEVkaXQuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { DefinedTestMachine } from '../../Shared/models/definedTestMachine';\nimport { NgbCalendar, NgbDatepickerI18n, NgbCalendarPersian, NgbDateStruct, NgbTimeStruct, NgbInputDatepicker, NgbDate } from '@ng-bootstrap/ng-bootstrap';\nimport { NgbDatepickerI18nPersian } from '../../Shared/services/NgbDatepickerI18nPersian';\nimport { ToastrService } from 'ngx-toastr';\nimport { TranslateService } from '@ngx-translate/core';\r\n\n// only used for modal\r\ndeclare var $: any;\n\n@Component({\n  selector: 'app-edit-defined-test-machine-assignment',\n  templateUrl: './definedTestMachineAssignmentEdit.component.html',\n  styleUrls: ['./definedTestMachineAssignmentEdit.component.css'],\n  providers: [\n    { provide: NgbCalendar, useClass: NgbCalendarPersian },\n    { provide: NgbDatepickerI18n, useClass: NgbDatepickerI18nPersian }\n  ]\n})\nexport class DefinedTestMachineAssignmentEditComponent implements OnInit {\n\n  public showloader: boolean = false;\n\n  definedTestMachineForm: FormGroup;\n  machineTitle: string;\n  formTitle = 'Create';\n  machineId: number;\n  errorMessage: any;\n  myAppUrl = '';\n  definedTestList: any;\n  definedTestMachineList: any;\n  id = 0;\n  endDate: NgbDateStruct;\n  beginDate: NgbDateStruct;\n  beginDateTime: NgbTimeStruct;\n  endDateTime: NgbTimeStruct;\n  defaultDate: Date;\n  //defaultTime: NgbTimeStruct;\n\n  breadcroumb = 'TestAssignment';\n\n  ReplaceTestConfirmMessage = \"\";\n\n  constructor(private _http: HttpClient,\n    private _fb: FormBuilder,\n    private _avRoute: ActivatedRoute,\n    private _router: Router,\n    @Inject('BASE_URL') baseUrl: string,\n    private toastrService: ToastrService,\n    private translate: TranslateService\n  ) {\n    if (this._avRoute.snapshot.params['Title']) {\n      this.machineTitle = this._avRoute.snapshot.params['Title'];\n    }\n    this.getDefinedTestList().subscribe(\n      (data) => {\n        this.definedTestList = data;\r\n      });\n    this.definedTestMachineForm = this._fb.group({\n      id: 0,\n      definedTestId: [0, [Validators.required, Validators.min(1)]],\n      isActive: [true, [Validators.required]],\n      machineId: [0],\n      beginDate: [, Validators.required],\n      endDate: [, Validators.required],\n      sim: [0, [Validators.required, Validators.min(1)]],\n      beginDateTime: [/*this.defaultTime*/, Validators.required],\n      endDateTime: [/*this.defaultTime*/, Validators.required],\n      bDate: [],\n      eDate: [],\n\n    });\n    if (this._avRoute.snapshot.params['id']) {\n      if (this._avRoute.snapshot.params['id'].indexOf(',') == -1) {\n        this.machineId = this._avRoute.snapshot.params['id'];\n      }\n      else {\n        this.machineId = this._avRoute.snapshot.params['id'].split(\",\")[0];\n        this.id = this._avRoute.snapshot.params['id'].split(\",\")[1]; //Id of groupTest\n      }\n\n      //this.defaultDate = data['defaultDate'];\n      //this.defaultTime = data['defaultTime'];\n      if (this.id > 0) {\n        this.formTitle = 'Edit';\n\n        this.breadcroumb = 'EditTest';\n\n        this.showloader = true;\n        this.getDefinedTestMachineById(this.id)\n          .subscribe((response) => {\n\n            //this.definedTestMachineForm.setValue(response);\n            this.definedTestMachineForm.controls['id'].setValue(response[\"id\"]);\n            this.definedTestMachineForm.controls['definedTestId'].setValue(response[\"definedTestId\"]);\n            this.definedTestMachineForm.controls['isActive'].setValue(response[\"isActive\"]);\n            this.definedTestMachineForm.controls['machineId'].setValue(response[\"machineId\"]);\n            this.definedTestMachineForm.controls['sim'].setValue(response[\"sim\"]);\n\n            this.definedTestMachineForm.controls['beginDate'].setValue(response[\"bDate\"]);\n            this.definedTestMachineForm.controls['endDate'].setValue(response[\"eDate\"]);\n\n            var bdate = new Date(response[\"bDate\"]);\n            var btime = ('00' + bdate.getHours()).substr(-2) + \":\" + ('00' + bdate.getMinutes()).substr(-2)\n            this.definedTestMachineForm.controls['beginDateTime'].setValue(btime);\n\n\n            var edate = new Date(response[\"eDate\"]);\n            var etime = ('00' + edate.getHours()).substr(-2) + \":\" + ('00' + edate.getMinutes()).substr(-2);\n            this.definedTestMachineForm.controls['endDateTime'].setValue(etime);\n\n            this.definedTestMachineForm.controls['bDate'].setValue(bdate);\n            this.definedTestMachineForm.controls['eDate'].setValue(edate);\n\n\n            this.showloader = false;\n\n          }, error => console.error(error))\n      }\n      else {\n\n        this.defaultDate = new Date();\r\n        var defaultTime = ('00' + this.defaultDate.getHours()).substr(-2) + \":\" + ('00' + this.defaultDate.getMinutes()).substr(-2);\r\n        this.definedTestMachineForm.controls['beginDateTime'].setValue(defaultTime);\r\n        this.definedTestMachineForm.controls['endDateTime'].setValue(defaultTime);\n      }\n\n    }\n    this.myAppUrl = baseUrl;\n  }\n  ngOnInit() {\n    if (this.id > 0) {\n      //this.definedTestMachineForm.get('definedTestId').disable();\n      //this.definedTestMachineForm.get('beginDate').disable();\n      //this.definedTestMachineForm.get('endDate').disable();\n      // this.definedTestMachineForm.get('sim').disable();\n      //this.definedTestMachineForm.get('beginDateTime').disable();\n      //this.definedTestMachineForm.get('endDateTime').disable();\n    }\n  }\n  getDefinedTestMachineById(id: number) {\n    return this._http.get(this.myAppUrl + 'api/DefinedTestMachine/Details/' + id)\n      .pipe(map(\n        response => {\n          return response;\n        }));\n  }\n  save() {\n    if (!this.definedTestMachineForm.valid) {\n      return;\n    }\n    else if (this.definedTestMachineForm.valid ) { //addby omid for ignore check DateTime validation\n      if (!this.definedTestMachineForm.controls['beginDate'].valid ||\n        this.definedTestMachineForm.controls['beginDate'].value == null) {\n        this.toastrService.error(this.translate.instant('BeginDateIsRequired'), this.translate.instant('Error'));\n        return;\n      }\n      if (!this.definedTestMachineForm.controls['endDate'].valid || this.definedTestMachineForm.controls['endDate'].value == null) {\n        this.toastrService.error(this.translate.instant('EndDateIsRequired'), this.translate.instant('Error'));\n        return;\n      }\n\n      var TDate = new Date();\n      var BDate;\n      var EDate;\n\n      if (localStorage.getItem('Language') == 'ar') {\n        BDate = this.definedTestMachineForm.controls['beginDate'].value._d;\r\n        EDate = this.definedTestMachineForm.controls['endDate'].value._d;\n      }\n      else {\n        BDate = this.definedTestMachineForm.controls['beginDate'].value;\r\n        EDate = this.definedTestMachineForm.controls['endDate'].value;\n      }\n\n      if (BDate) {\n        var BOTime = this.definedTestMachineForm.controls['beginDateTime'].value.split(':');\n        BDate.setHours(BOTime[0], BOTime[1], 0, 0);\n      }\n\n      if (EDate) {\n        var EOTime = this.definedTestMachineForm.controls['endDateTime'].value.split(':');\n        EDate.setHours(EOTime[0], EOTime[1], 0, 0);\n      }\n\n      if (TDate >= BDate) {\n        this.toastrService.error(this.translate.instant('BeginDateShouldBeGreaterThanCurrentDate'), this.translate.instant('Error'));\n        return;\n      }\n\n      if (BDate >= EDate) {\n        this.toastrService.error(this.translate.instant('EndDateShouldBeGreaterThanBeginDate'), this.translate.instant('Error'));\n        return;\n      }\n\n    }\n    if (this._avRoute.snapshot.params['id'].indexOf(',') == -1) {\n      this.definedTestMachineForm.controls['machineId'].setValue(this._avRoute.snapshot.params['id']);\n    }\n    else {\n      this.definedTestMachineForm.controls['machineId'].setValue(this._avRoute.snapshot.params['id'].split(\",\")[0]);\n      this.definedTestMachineForm.controls['id'].setValue(this._avRoute.snapshot.params['id'].split(\",\")[1]);\n    }\n\n    this.showloader = true;\n\n    if (localStorage.getItem('Language') == 'ar') {\n\n      if (this.definedTestMachineForm.controls['beginDate'].value._d == undefined) {\r\n        var temp = new Date(this.definedTestMachineForm.controls['beginDate'].value);\r\n        this.definedTestMachineForm.controls['bDate'].setValue(temp.toLocaleDateString());\r\n      }\n      else\n        this.definedTestMachineForm.controls['bDate'].setValue(this.definedTestMachineForm.controls['beginDate'].value._d.toLocaleDateString());\n\n\n      if (this.definedTestMachineForm.controls['endDate'].value._d == undefined) {\r\n        var temp = new Date(this.definedTestMachineForm.controls['endDate'].value);\r\n        this.definedTestMachineForm.controls['eDate'].setValue(temp.toLocaleDateString());\r\n      }\n      else\n        this.definedTestMachineForm.controls['eDate'].setValue(this.definedTestMachineForm.controls['endDate'].value._d.toLocaleDateString());\n\n    }\n    else {\r\n\r\n      if (this.definedTestMachineForm.controls['beginDate'].value.toLocaleDateString == undefined) {\r\n\r\n        var temp = new Date(this.definedTestMachineForm.controls['beginDate'].value);\r\n        this.definedTestMachineForm.controls['bDate'].setValue(temp.toLocaleDateString());\r\n      }\r\n      else\r\n        this.definedTestMachineForm.controls['bDate'].setValue(this.definedTestMachineForm.controls['beginDate'].value.toLocaleDateString());\n\n      if (this.definedTestMachineForm.controls['endDate'].value.toLocaleDateString == undefined) {\r\n\r\n        var temp = new Date(this.definedTestMachineForm.controls['endDate'].value);\r\n        this.definedTestMachineForm.controls['eDate'].setValue(temp.toLocaleDateString());\r\n      }\r\n      else\r\n        this.definedTestMachineForm.controls['eDate'].setValue(this.definedTestMachineForm.controls['endDate'].value.toLocaleDateString());\n    }\n\n    if (this.formTitle === 'Create') {\n      //بررسی وجود تست گروهی برای گروه و پدرهای گروه دستگاه\n      //اگر تست گروهی وجود داشت با نمایش پیغام به کاربر و دریافت تایید جایگزینی تست جدید\n      //متد ذخیره را فراخوانی می کنیم\n\n      this.IsDefinedTestForMachineGroupAndParentByMachineID(this.definedTestMachineForm.value)\n        .subscribe((result) => {\n\n          this.showloader = false;\n\n          if (result == 0) {\n\n            this.showloader = true;\n\n            this.IsDefinedTestForMachineByMachineID(this.definedTestMachineForm.value)\n              .subscribe((res) => {\n\n                this.showloader = true;\n\n                if (res == 0) {\n                  this.saveDefinedTestMachine(this.definedTestMachineForm.value)\n                    .subscribe(() => {\n\n                      this.showloader = false;\n\n                      this._router.navigate(['/Test/Assignment/Machine/' + this.machineId + \"/\" + this.machineTitle]);\n                    }, error => console.error(error));\n                }\n                else {\n\n                  this.showloader = false;\n                  $('#modal-default').modal('show');\n                  this.ReplaceTestConfirmMessage = this.translate.instant('InterferenceTestDateRangeConfirmMessage');\n                }\n              }, error => console.error(error));\n          }\n          else {\n\n            this.showloader = false;\n            $('#modal-default').modal('show');\n            this.ReplaceTestConfirmMessage = this.translate.instant('InterferenceTestDateRangeConfirmMessage');\n          }\n\n        }, error => console.error(error));\n\n    } else if (this.formTitle === 'Edit') {\n\n      this.updateDefinedTestMachine(this.definedTestMachineForm.value)\n        .subscribe(() => {\n          this.showloader = false;\n          this._router.navigate(['/Test/Assignment/Machine/' + this.machineId + \"/\" + this.machineTitle]);\n        }, error => console.error(error));\n    }\n  }\n  cancel() {\n    this._router.navigate(['/Test/Assignment/Machine/' + this.machineId + \"/\" + this.machineTitle]);\n  }\n  getDefinedTests(id: number) {\n    this._http.get(this.myAppUrl + 'api/Machine/IndexWithDefinedTest/' + id).pipe(map(\n      response => {\n        return response;\n      }\n    )).subscribe(\n      (data) => {\n        this.definedTestMachineList = data;\n      }\n    );\n  }\n  getDefinedTestList() {\n    return this._http.get(this.myAppUrl + 'api/DefinedTest/index/')\n      .pipe(map(\n        response => {\n          return response;\n        }));\n  }\n  getDefaultDateTime() {\n    return this._http.get(this.myAppUrl + 'api/DefinedTestMachine/DefaultDateTime/')\n      .pipe(map(\n        response => {\n          return response;\n        }));\n  }\n  saveDefinedTestMachine(definedTestMachine: DefinedTestMachine) {\n    return this._http.post(this.myAppUrl + 'api/DefinedTestMachine/Create', definedTestMachine)\n      .pipe(map(\n        response => {\n          return response;\n        }));\n  }\n  updateDefinedTestMachine(definedTestMachine: DefinedTestMachine) {\n    return this._http.put(this.myAppUrl + 'api/DefinedTestMachine/Edit', definedTestMachine)\n      .pipe(map(\n        response => {\n          return response;\n        }));\n  }\n\n\n  AcceptConfirm() {\n\n    //فراخانی متد غیرفعال سازی تست های گروهی و ذخیره تست انفرادی\n    this.DeactivateTestForMachineGroupAndDefinedTestMachine(this.definedTestMachineForm.value)\n      .subscribe(() => {\n\n        $('#modal-default').modal('hide');\n        this.showloader = true;\n        this._router.navigate(['/Test/Assignment/Machine/' + this.machineId + \"/\" + this.machineTitle]);\n      });\n  }\n\n  IsDefinedTestForMachineByMachineID(definedTestMachine: DefinedTestMachine) {\n    return this._http.post(this.myAppUrl + 'api/DefinedTestMachine/IsDefinedTestForMachineByMachineID', definedTestMachine)\n      .pipe(map(\n        response => {\n          return response;\n        }));\n  }\n\n  IsDefinedTestForMachineGroupAndParentByMachineID(definedTestMachine: DefinedTestMachine) {\n    return this._http.post(this.myAppUrl + 'api/DefinedTestMachine/IsDefinedTestForMachineGroupAndParentByMachineID', definedTestMachine)\n      .pipe(map(\n        response => {\n          return response;\n        }));\n  }\n\n  DeactivateTestForMachineGroupAndDefinedTestMachine(definedTestMachine: DefinedTestMachine) {\n    return this._http.post(this.myAppUrl + 'api/DefinedTestMachine/DeactivateTestForMachineGroupAndDefinedTestMachine', definedTestMachine)\n      .pipe(map(\n        response => {\n          return response;\n        }));\n  }\n\n  get definedTestId() { return this.definedTestMachineForm.get('definedTestId'); }\n  get isActive() { return this.definedTestMachineForm.get('isActive'); }\n  get sim() { return this.definedTestMachineForm.get('sim'); }\n\n  // convenience getter for easy access to form fields\r\n  get f() { return this.definedTestMachineForm.controls; }\n}\n","import { LoginGruard } from '../Authority/loginguard';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { DefinedTestEditComponent } from './definedTestEdit/definedTestEdit.component';\nimport { DefinedTestMachineAssignmentComponent } from './definedTestMachineAssignment/definedTestMachineAssignment.component';\nimport { DefinedTestGroupAssignmentComponent } from './definedTestGroupAssignment/definedTestGroupAssignment.component';\nimport { DefinedTestMachineAssignmentEditComponent } from './definedTestMachineAssignmentEdit/definedTestMachineAssignmentEdit.component';\nimport { DefinedTestGroupAssignmentEditComponent } from './definedTestGroupAssignmentEdit/definedTestGroupAssignmentEdit.component';\nimport { DefinedTestComponent } from './definedTest/definedTest.component';\r\n\nconst routes: Routes = [\n  {\r\n    path: '',\n    children: [\n      { path: '', component: DefinedTestComponent, data: { breadcrumb: 'فهرست تست ها ', pageTitle: \"فهرست تست ها\" } },\n      { path: 'Create', component: DefinedTestEditComponent, data: { breadcrumb: 'ایجاد تست ', pageTitle: \"فهرست تست ها\" } },\n      { path: 'edit/:id', component: DefinedTestEditComponent, data: { breadcrumb: 'اصلاح تست ', pageTitle: \"فهرست تست ها\" } },\n      { path: 'Assignment/Machine/:id/:Title', component: DefinedTestMachineAssignmentComponent, data: { breadcrumb: 'فهرست تست های دستگاه ', pageTitle: \"فهرست تست های دستگاه\"} },\n      { path: 'Assignment/edit/:id/:Title', component: DefinedTestMachineAssignmentEditComponent, data: { breadcrumb: 'تخصیص تست به دستگاه ', pageTitle: \"تخصیص تست به دستگاه\"} },\n      { path: 'Assignment/create/:id/:Title', component: DefinedTestMachineAssignmentEditComponent, data: { breadcrumb: 'اصلاح تست دستگاه ', pageTitle: \"اصلاح تست دستگاه\"} },\n      { path: 'Group/Assignment/:id/:Title', component: DefinedTestGroupAssignmentComponent, data: { breadcrumb: 'فهرست تست های گروه ', pageTitle: \"فهرست تست های گروه\"} },\n      { path: 'Group/Assignment/Create/:id/:Title', component: DefinedTestGroupAssignmentEditComponent, data: { breadcrumb: 'تخصیص تست به گروه ', pageTitle: \"تخصیص تست به گروه\"} },\n      { path: 'Group/Assignment/Edit/:id/:Title', component: DefinedTestGroupAssignmentEditComponent, data: { breadcrumb: 'اصلاح تست گروه ', pageTitle: \"اصلاح تست گروه\"} },\n    ], canActivate: [LoginGruard]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class TestRoutingModule { }\n","import { sharedModule } from './../Shared/shared.modules';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TestRoutingModule } from './test-routing.module';\nimport { DefinedTestComponent } from './definedTest/definedTest.component';\nimport { DefinedTestEditComponent } from './definedTestEdit/definedTestEdit.component';\nimport { DefinedTestMachineAssignmentComponent } from './definedTestMachineAssignment/definedTestMachineAssignment.component';\nimport { DefinedTestGroupAssignmentComponent } from './definedTestGroupAssignment/definedTestGroupAssignment.component';\nimport { DefinedTestMachineAssignmentEditComponent } from './definedTestMachineAssignmentEdit/definedTestMachineAssignmentEdit.component';\nimport { DefinedTestGroupAssignmentEditComponent } from './definedTestGroupAssignmentEdit/definedTestGroupAssignmentEdit.component';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\n\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\r\n\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { BreadcrumbComponent } from '../breadcrumb/breadcrumb.component';\r\n\n@NgModule({\n  declarations: [\n    DefinedTestComponent,\n    DefinedTestEditComponent,\n    DefinedTestMachineAssignmentComponent,\n    DefinedTestGroupAssignmentComponent,\n    DefinedTestMachineAssignmentEditComponent,\n    DefinedTestGroupAssignmentEditComponent,\n\n    //BreadcrumbComponent\n  ],\n  imports: [\n    CommonModule,\n    TestRoutingModule,\n    MatProgressBarModule,\n    sharedModule,\n    MatCheckboxModule,\n\n    MatDatepickerModule,\n    MatInputModule,\n    MatFormFieldModule,\n    MatIconModule,\n\n    MatTableModule,\n    MatPaginatorModule\n  ],\n  //exports: [\n  //  BreadcrumbComponent,\n  //],\n})\nexport class TestModule { }\n"],"sourceRoot":""}