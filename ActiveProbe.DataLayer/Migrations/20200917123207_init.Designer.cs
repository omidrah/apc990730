// <auto-generated />
using System;
using ActiveProbe.DataLayer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ActiveProbe.DataLayer.Migrations
{
    [DbContext(typeof(ActiveProbeCoreContext))]
    [Migration("20200917123207_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ActiveProbe.Domain.Identity.AppDataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FriendlyName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("XmlData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FriendlyName")
                        .IsUnique()
                        .HasFilter("[FriendlyName] IS NOT NULL");

                    b.ToTable("AppDataProtectionKeys");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Identity.AppLogItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("LogLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logger")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("StateJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppLogItems");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Identity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AppRoles");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Identity.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AppRoleClaims");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailPublic")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("LastVisitDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PhotoFileName")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Identity.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserClaims");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Identity.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserLogins");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Identity.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AppUserRoles");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Identity.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedByBrowserName")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AppUserTokens");
                });

         

            modelBuilder.Entity("ActiveProbe.Domain.Models.ActiveProbeParams", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descriptions")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("TypeLen")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ActiveProbeParams");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.Band", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Band");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.Channel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<int>("MediaType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Params")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Protocols")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Timeout")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Channel");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.Command", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BuildDt")
                        .HasColumnName("BuildDT")
                        .HasColumnType("datetime");

                    b.Property<byte>("CommandType")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("ConfigId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("HasResponse")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<int?>("MachineId")
                        .HasColumnName("MachineID")
                        .HasColumnType("int");

                    b.Property<string>("ReadableCommand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReadableResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Response")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("ResponseDt")
                        .HasColumnName("ResponseDT")
                        .HasColumnType("datetime");

                    b.Property<int?>("ResponseReceivedChannelId")
                        .HasColumnName("ResponseReceivedChannelID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SendDt")
                        .HasColumnName("SendDT")
                        .HasColumnType("datetime");

                    b.Property<byte>("SendingScenario")
                        .HasColumnType("tinyint");

                    b.Property<int?>("Timeout")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MachineId");

                    b.ToTable("Command");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.CommandOnMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("CommandBytes")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("CommandId")
                        .HasColumnName("CommandID")
                        .HasColumnType("bigint");

                    b.Property<byte>("MediaType")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("CommandId");

                    b.ToTable("CommandOnMedia");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.DateTestModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Fname")
                        .HasColumnName("FName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Lname")
                        .HasColumnName("LName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("DateTestModel");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.DefinedTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short?>("BandId")
                        .HasColumnType("smallint");

                    b.Property<int?>("FileSize")
                        .HasColumnType("int");

                    b.Property<short?>("InternalTime")
                        .HasColumnType("smallint");

                    b.Property<short?>("IptypeId")
                        .HasColumnName("IPTypeId")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("Layer3Messages")
                        .HasColumnType("bit");

                    b.Property<int?>("LogFileHoldTime")
                        .HasColumnType("int");

                    b.Property<short?>("LogFilePartitionSize")
                        .HasColumnType("smallint");

                    b.Property<short?>("LogFilePartitionTime")
                        .HasColumnType("smallint");

                    b.Property<short?>("LogFilePartitionTypeId")
                        .HasColumnType("smallint");

                    b.Property<int>("MeasurementInterval")
                        .HasColumnType("int");

                    b.Property<short>("NetworkId")
                        .HasColumnType("smallint");

                    b.Property<short?>("NumberOfPings")
                        .HasColumnType("smallint");

                    b.Property<short?>("OttserviceId")
                        .HasColumnName("OTTServiceId")
                        .HasColumnType("smallint");

                    b.Property<short?>("OttserviceTestId")
                        .HasColumnName("OTTServiceTestId")
                        .HasColumnType("smallint");

                    b.Property<short?>("PacketSize")
                        .HasColumnType("smallint");

                    b.Property<int?>("RepeatCount")
                        .HasColumnType("int");

                    b.Property<int?>("RepeatTime")
                        .HasColumnType("int");

                    b.Property<short>("RepeatTypeId")
                        .HasColumnType("smallint");

                    b.Property<int?>("ResponseWaitTime")
                        .HasColumnType("int");

                    b.Property<bool?>("SaveLogFile")
                        .HasColumnType("bit");

                    b.Property<string>("TestDataDownloadFileAddress")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<short?>("TestDataId")
                        .HasColumnType("smallint");

                    b.Property<string>("TestDataPassword")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TestDataServer")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<short?>("TestDataTypeId")
                        .HasColumnType("smallint");

                    b.Property<int?>("TestDataUploadFileSize")
                        .HasColumnType("int");

                    b.Property<string>("TestDataUserName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<short>("TestTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(254)")
                        .HasMaxLength(254);

                    b.Property<int?>("TraceRouteHubCount")
                        .HasColumnType("int");

                    b.Property<short?>("Ttl")
                        .HasColumnName("TTL")
                        .HasColumnType("smallint");

                    b.Property<int?>("UsualCallDuration")
                        .HasColumnType("int");

                    b.Property<string>("UsualCallNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("UsualCallWaitTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TestTypeId");

                    b.ToTable("DefinedTest");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.DefinedTestMachine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("datetime");

                    b.Property<int>("DefinedTestId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FinishTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MachineId")
                        .HasColumnType("int");

                    b.Property<short>("Sim")
                        .HasColumnName("SIM")
                        .HasColumnType("smallint");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("TestGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DefinedTestId");

                    b.HasIndex("MachineId");

                    b.HasIndex("TestGroupId");

                    b.ToTable("DefinedTestMachine");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.DefinedTestMachineGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BeginDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DefinedTestId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FinishTime")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("MachineGroupId")
                        .HasColumnType("int");

                    b.Property<short?>("Sim")
                        .HasColumnName("SIM")
                        .HasColumnType("smallint");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DefinedTestId");

                    b.HasIndex("MachineGroupId");

                    b.ToTable("DefinedTestMachineGroup");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.Direction", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Direction");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.Errors", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Business")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("ExtraData")
                        .HasColumnType("nvarchar(4000)")
                        .HasMaxLength(4000);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(4000)")
                        .HasMaxLength(4000);

                    b.Property<string>("Methode")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("RawError")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Errors","system");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.FieldColorThreshold", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasColumnName("fieldName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("RangeColor")
                        .IsRequired()
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<int?>("RangeFrom")
                        .HasColumnType("int");

                    b.Property<int?>("RangeTo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FieldColorThreshold");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.GroupMachine", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID")
                        .HasColumnType("int");

                    b.Property<int>("MachineId")
                        .HasColumnName("MachineID")
                        .HasColumnType("int");

                    b.ToTable("Group_Machine");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.InfoPacket", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short?>("Alt")
                        .HasColumnType("smallint");

                    b.Property<byte[]>("AutoG2Call")
                        .HasColumnName("Auto_G2_Call")
                        .HasColumnType("varbinary(28)")
                        .HasMaxLength(28);

                    b.Property<short?>("AutoG2IdleArfcn")
                        .HasColumnName("Auto_G2_Idle_ARFCN")
                        .HasColumnType("smallint");

                    b.Property<byte?>("AutoG2IdleBsic")
                        .HasColumnName("Auto_G2_Idle_BSIC")
                        .HasColumnType("tinyint");

                    b.Property<int?>("AutoG2IdleCellId")
                        .HasColumnName("Auto_G2_Idle_CellID")
                        .HasColumnType("int");

                    b.Property<int?>("AutoG2IdleLac")
                        .HasColumnName("Auto_G2_Idle_LAC")
                        .HasColumnType("int");

                    b.Property<short?>("AutoG2IdleMcc")
                        .HasColumnName("Auto_G2_Idle_MCC")
                        .HasColumnType("smallint");

                    b.Property<byte?>("AutoG2IdleMnc")
                        .HasColumnName("Auto_G2_Idle_MNC")
                        .HasColumnType("tinyint");

                    b.Property<short?>("AutoG2IdleRxLev")
                        .HasColumnName("Auto_G2_Idle_RxLev")
                        .HasColumnType("smallint");

                    b.Property<byte?>("AutoG2IdleSystem")
                        .HasColumnName("Auto_G2_Idle_System")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("AutoG2PingPLost")
                        .HasColumnName("Auto_G2_Ping_pLost")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("AutoG2PingPRec")
                        .HasColumnName("Auto_G2_Ping_pRec")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("AutoG2PingPSent")
                        .HasColumnName("Auto_G2_Ping_pSent")
                        .HasColumnType("tinyint");

                    b.Property<short?>("AutoG2PingRttAvg")
                        .HasColumnName("Auto_G2_Ping_rttAvg")
                        .HasColumnType("smallint");

                    b.Property<short?>("AutoG2PingRttMax")
                        .HasColumnName("Auto_G2_Ping_rttMax")
                        .HasColumnType("smallint");

                    b.Property<short?>("AutoG2PingRttMin")
                        .HasColumnName("Auto_G2_Ping_rttMin")
                        .HasColumnType("smallint");

                    b.Property<short?>("AutoG2VoiceArfcn")
                        .HasColumnName("Auto_G2_Voice_ARFCN")
                        .HasColumnType("smallint");

                    b.Property<byte?>("AutoG2VoiceBsic")
                        .HasColumnName("Auto_G2_Voice_BSIC")
                        .HasColumnType("tinyint");

                    b.Property<int?>("AutoG2VoiceCellId")
                        .HasColumnName("Auto_G2_Voice_CellID")
                        .HasColumnType("int");

                    b.Property<int?>("AutoG2VoiceLac")
                        .HasColumnName("Auto_G2_Voice_LAC")
                        .HasColumnType("int");

                    b.Property<short?>("AutoG2VoiceMcc")
                        .HasColumnName("Auto_G2_Voice_MCC")
                        .HasColumnType("smallint");

                    b.Property<byte?>("AutoG2VoiceMnc")
                        .HasColumnName("Auto_G2_Voice_MNC")
                        .HasColumnType("tinyint");

                    b.Property<short?>("AutoG2VoiceRxLev")
                        .HasColumnName("Auto_G2_Voice_RxLev")
                        .HasColumnType("smallint");

                    b.Property<byte?>("AutoG2VoiceRxQual")
                        .HasColumnName("Auto_G2_Voice_RxQual")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("AutoG2VoiceSystem")
                        .HasColumnName("Auto_G2_Voice_System")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("AutoG2VoiceTa")
                        .HasColumnName("Auto_G2_Voice_Ta")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("AutoG2VoiceTxPwr")
                        .HasColumnName("Auto_G2_Voice_TxPwr")
                        .HasColumnType("tinyint");

                    b.Property<byte[]>("AutoG3Call")
                        .HasColumnName("Auto_G3_Call")
                        .HasColumnType("varbinary(28)")
                        .HasMaxLength(28);

                    b.Property<float?>("AutoG3IdleEcio")
                        .HasColumnName("Auto_G3_Idle_ECIO")
                        .HasColumnType("real");

                    b.Property<int?>("AutoG3IdleId")
                        .HasColumnName("Auto_G3_Idle_ID")
                        .HasColumnType("int");

                    b.Property<int?>("AutoG3IdleLac")
                        .HasColumnName("Auto_G3_Idle_LAC")
                        .HasColumnType("int");

                    b.Property<short?>("AutoG3IdleMcc")
                        .HasColumnName("Auto_G3_Idle_MCC")
                        .HasColumnType("smallint");

                    b.Property<byte?>("AutoG3IdleMnc")
                        .HasColumnName("Auto_G3_Idle_MNC")
                        .HasColumnType("tinyint");

                    b.Property<short?>("AutoG3IdlePsc")
                        .HasColumnName("Auto_G3_Idle_PSC")
                        .HasColumnType("smallint");

                    b.Property<string>("AutoG3IdleRfBand")
                        .HasColumnName("Auto_G3_Idle_RfBand")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<short?>("AutoG3IdleRscp")
                        .HasColumnName("Auto_G3_Idle_RSCP")
                        .HasColumnType("smallint");

                    b.Property<short?>("AutoG3IdleRssi")
                        .HasColumnName("Auto_G3_Idle_RSSI")
                        .HasColumnType("smallint");

                    b.Property<short?>("AutoG3IdleRxLev")
                        .HasColumnName("Auto_G3_Idle_RxLev")
                        .HasColumnType("smallint");

                    b.Property<byte?>("AutoG3IdleSystem")
                        .HasColumnName("Auto_G3_Idle_System")
                        .HasColumnType("tinyint");

                    b.Property<short?>("AutoG3IdleUarfcn")
                        .HasColumnName("Auto_G3_Idle_UARFCN")
                        .HasColumnType("smallint");

                    b.Property<byte?>("AutoG3PingPLost")
                        .HasColumnName("Auto_G3_Ping_pLost")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("AutoG3PingPRec")
                        .HasColumnName("Auto_G3_Ping_pRec")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("AutoG3PingPSent")
                        .HasColumnName("Auto_G3_Ping_pSent")
                        .HasColumnType("tinyint");

                    b.Property<short?>("AutoG3PingRttAvg")
                        .HasColumnName("Auto_G3_Ping_rttAvg")
                        .HasColumnType("smallint");

                    b.Property<short?>("AutoG3PingRttMax")
                        .HasColumnName("Auto_G3_Ping_rttMax")
                        .HasColumnType("smallint");

                    b.Property<short?>("AutoG3PingRttMin")
                        .HasColumnName("Auto_G3_Ping_rttMin")
                        .HasColumnType("smallint");

                    b.Property<byte?>("AutoG3VoiceBer")
                        .HasColumnName("Auto_G3_Voice_BER")
                        .HasColumnType("tinyint");

                    b.Property<float?>("AutoG3VoiceEcio")
                        .HasColumnName("Auto_G3_Voice_ECIO")
                        .HasColumnType("real");

                    b.Property<int?>("AutoG3VoiceId")
                        .HasColumnName("Auto_G3_Voice_ID")
                        .HasColumnType("int");

                    b.Property<int?>("AutoG3VoiceLac")
                        .HasColumnName("Auto_G3_Voice_LAC")
                        .HasColumnType("int");

                    b.Property<short?>("AutoG3VoiceMcc")
                        .HasColumnName("Auto_G3_Voice_MCC")
                        .HasColumnType("smallint");

                    b.Property<byte?>("AutoG3VoiceMnc")
                        .HasColumnName("Auto_G3_Voice_MNC")
                        .HasColumnType("tinyint");

                    b.Property<short?>("AutoG3VoicePsc")
                        .HasColumnName("Auto_G3_Voice_PSC")
                        .HasColumnType("smallint");

                    b.Property<string>("AutoG3VoiceRfBand")
                        .HasColumnName("Auto_G3_Voice_RfBand")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<short?>("AutoG3VoiceRscp")
                        .HasColumnName("Auto_G3_Voice_RSCP")
                        .HasColumnType("smallint");

                    b.Property<short?>("AutoG3VoiceRssi")
                        .HasColumnName("Auto_G3_Voice_RSSI")
                        .HasColumnType("smallint");

                    b.Property<short?>("AutoG3VoiceRxLev")
                        .HasColumnName("Auto_G3_Voice_RxLev")
                        .HasColumnType("smallint");

                    b.Property<byte?>("AutoG3VoiceSystem")
                        .HasColumnName("Auto_G3_Voice_System")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("AutoG3VoiceTxPwr")
                        .HasColumnName("Auto_G3_Voice_TxPwr")
                        .HasColumnType("tinyint");

                    b.Property<short?>("AutoG3VoiceUarfcn")
                        .HasColumnName("Auto_G3_Voice_UARFCN")
                        .HasColumnType("smallint");

                    b.Property<short?>("AutoG4CellId")
                        .HasColumnName("Auto_G4_CellID")
                        .HasColumnType("smallint");

                    b.Property<byte?>("AutoG4Dlbw")
                        .HasColumnName("Auto_G4_DLBW")
                        .HasColumnType("tinyint");

                    b.Property<short?>("AutoG4Earfcn")
                        .HasColumnName("Auto_G4_EARFCN")
                        .HasColumnType("smallint");

                    b.Property<string>("AutoG4FrqBand")
                        .HasColumnName("Auto_G4_FrqBand")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int?>("AutoG4Lac")
                        .HasColumnName("Auto_G4_LAC")
                        .HasColumnType("int");

                    b.Property<short?>("AutoG4Mcc")
                        .HasColumnName("Auto_G4_MCC")
                        .HasColumnType("smallint");

                    b.Property<byte?>("AutoG4Mnc")
                        .HasColumnName("Auto_G4_MNC")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("AutoG4PingPLost")
                        .HasColumnName("Auto_G4_Ping_pLost")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("AutoG4PingPRec")
                        .HasColumnName("Auto_G4_Ping_pRec")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("AutoG4PingPSent")
                        .HasColumnName("Auto_G4_Ping_pSent")
                        .HasColumnType("tinyint");

                    b.Property<short?>("AutoG4PingRttAvg")
                        .HasColumnName("Auto_G4_Ping_rttAvg")
                        .HasColumnType("smallint");

                    b.Property<short?>("AutoG4PingRttMax")
                        .HasColumnName("Auto_G4_Ping_rttMax")
                        .HasColumnType("smallint");

                    b.Property<short?>("AutoG4PingRttMin")
                        .HasColumnName("Auto_G4_Ping_rttMin")
                        .HasColumnType("smallint");

                    b.Property<float?>("AutoG4Rsrp")
                        .HasColumnName("Auto_G4_RSRP")
                        .HasColumnType("real");

                    b.Property<float?>("AutoG4Rsrq")
                        .HasColumnName("Auto_G4_RSRQ")
                        .HasColumnType("real");

                    b.Property<float?>("AutoG4Rssi")
                        .HasColumnName("Auto_G4_RSSI")
                        .HasColumnType("real");

                    b.Property<short?>("AutoG4Rssnr")
                        .HasColumnName("Auto_G4_RSSNR")
                        .HasColumnType("smallint");

                    b.Property<short?>("AutoG4Sinr")
                        .HasColumnName("Auto_G4_SINR")
                        .HasColumnType("smallint");

                    b.Property<byte?>("AutoG4System")
                        .HasColumnName("Auto_G4_System")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("AutoG4Ulbw")
                        .HasColumnName("Auto_G4_ULBW")
                        .HasColumnType("tinyint");

                    b.Property<float>("BatteryVoltage")
                        .HasColumnType("real");

                    b.Property<byte>("ChannelId")
                        .HasColumnName("ChannelID")
                        .HasColumnType("tinyint");

                    b.Property<byte>("DeviceStatus")
                        .HasColumnType("tinyint");

                    b.Property<short?>("Direction")
                        .HasColumnType("smallint");

                    b.Property<byte>("EventCode")
                        .HasColumnType("tinyint");

                    b.Property<byte[]>("ForceG2Call")
                        .HasColumnName("Force_G2_Call")
                        .HasColumnType("varbinary(28)")
                        .HasMaxLength(28);

                    b.Property<short?>("ForceG2IdleArfcn")
                        .HasColumnName("Force_G2_Idle_ARFCN")
                        .HasColumnType("smallint");

                    b.Property<byte?>("ForceG2IdleBsic")
                        .HasColumnName("Force_G2_Idle_BSIC")
                        .HasColumnType("tinyint");

                    b.Property<int?>("ForceG2IdleCellId")
                        .HasColumnName("Force_G2_Idle_CellID")
                        .HasColumnType("int");

                    b.Property<int?>("ForceG2IdleLac")
                        .HasColumnName("Force_G2_Idle_LAC")
                        .HasColumnType("int");

                    b.Property<short?>("ForceG2IdleMcc")
                        .HasColumnName("Force_G2_Idle_MCC")
                        .HasColumnType("smallint");

                    b.Property<byte?>("ForceG2IdleMnc")
                        .HasColumnName("Force_G2_Idle_MNC")
                        .HasColumnType("tinyint");

                    b.Property<short?>("ForceG2IdleRxLev")
                        .HasColumnName("Force_G2_Idle_RxLev")
                        .HasColumnType("smallint");

                    b.Property<byte?>("ForceG2IdleSystem")
                        .HasColumnName("Force_G2_Idle_System")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("ForceG2PingPLost")
                        .HasColumnName("Force_G2_Ping_pLost")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("ForceG2PingPRec")
                        .HasColumnName("Force_G2_Ping_pRec")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("ForceG2PingPSent")
                        .HasColumnName("Force_G2_Ping_pSent")
                        .HasColumnType("tinyint");

                    b.Property<short?>("ForceG2PingRttAvg")
                        .HasColumnName("Force_G2_Ping_rttAvg")
                        .HasColumnType("smallint");

                    b.Property<short?>("ForceG2PingRttMax")
                        .HasColumnName("Force_G2_Ping_rttMax")
                        .HasColumnType("smallint");

                    b.Property<short?>("ForceG2PingRttMin")
                        .HasColumnName("Force_G2_Ping_rttMin")
                        .HasColumnType("smallint");

                    b.Property<short?>("ForceG2VoiceArfcn")
                        .HasColumnName("Force_G2_Voice_ARFCN")
                        .HasColumnType("smallint");

                    b.Property<byte?>("ForceG2VoiceBsic")
                        .HasColumnName("Force_G2_Voice_BSIC")
                        .HasColumnType("tinyint");

                    b.Property<int?>("ForceG2VoiceCellId")
                        .HasColumnName("Force_G2_Voice_CellID")
                        .HasColumnType("int");

                    b.Property<int?>("ForceG2VoiceLac")
                        .HasColumnName("Force_G2_Voice_LAC")
                        .HasColumnType("int");

                    b.Property<short?>("ForceG2VoiceMcc")
                        .HasColumnName("Force_G2_Voice_MCC")
                        .HasColumnType("smallint");

                    b.Property<byte?>("ForceG2VoiceMnc")
                        .HasColumnName("Force_G2_Voice_MNC")
                        .HasColumnType("tinyint");

                    b.Property<short?>("ForceG2VoiceRxLev")
                        .HasColumnName("Force_G2_Voice_RxLev")
                        .HasColumnType("smallint");

                    b.Property<byte?>("ForceG2VoiceRxQual")
                        .HasColumnName("Force_G2_Voice_RxQual")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("ForceG2VoiceSystem")
                        .HasColumnName("Force_G2_Voice_System")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("ForceG2VoiceTa")
                        .HasColumnName("Force_G2_Voice_Ta")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("ForceG2VoiceTxPwr")
                        .HasColumnName("Force_G2_Voice_TxPwr")
                        .HasColumnType("tinyint");

                    b.Property<byte[]>("ForceG3Call")
                        .HasColumnName("Force_G3_Call")
                        .HasColumnType("varbinary(28)")
                        .HasMaxLength(28);

                    b.Property<float?>("ForceG3IdleEcio")
                        .HasColumnName("Force_G3_Idle_ECIO")
                        .HasColumnType("real");

                    b.Property<int?>("ForceG3IdleId")
                        .HasColumnName("Force_G3_Idle_ID")
                        .HasColumnType("int");

                    b.Property<int?>("ForceG3IdleLac")
                        .HasColumnName("Force_G3_Idle_LAC")
                        .HasColumnType("int");

                    b.Property<short?>("ForceG3IdleMcc")
                        .HasColumnName("Force_G3_Idle_MCC")
                        .HasColumnType("smallint");

                    b.Property<byte?>("ForceG3IdleMnc")
                        .HasColumnName("Force_G3_Idle_MNC")
                        .HasColumnType("tinyint");

                    b.Property<short?>("ForceG3IdlePsc")
                        .HasColumnName("Force_G3_Idle_PSC")
                        .HasColumnType("smallint");

                    b.Property<string>("ForceG3IdleRfBand")
                        .HasColumnName("Force_G3_Idle_RfBand")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<short?>("ForceG3IdleRscp")
                        .HasColumnName("Force_G3_Idle_RSCP")
                        .HasColumnType("smallint");

                    b.Property<short?>("ForceG3IdleRssi")
                        .HasColumnName("Force_G3_Idle_RSSI")
                        .HasColumnType("smallint");

                    b.Property<short?>("ForceG3IdleRxLev")
                        .HasColumnName("Force_G3_Idle_RxLev")
                        .HasColumnType("smallint");

                    b.Property<byte?>("ForceG3IdleSystem")
                        .HasColumnName("Force_G3_Idle_System")
                        .HasColumnType("tinyint");

                    b.Property<short?>("ForceG3IdleUarfcn")
                        .HasColumnName("Force_G3_Idle_UARFCN")
                        .HasColumnType("smallint");

                    b.Property<byte?>("ForceG3PingPLost")
                        .HasColumnName("Force_G3_Ping_pLost")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("ForceG3PingPRec")
                        .HasColumnName("Force_G3_Ping_pRec")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("ForceG3PingPSent")
                        .HasColumnName("Force_G3_Ping_pSent")
                        .HasColumnType("tinyint");

                    b.Property<short?>("ForceG3PingRttAvg")
                        .HasColumnName("Force_G3_Ping_rttAvg")
                        .HasColumnType("smallint");

                    b.Property<short?>("ForceG3PingRttMax")
                        .HasColumnName("Force_G3_Ping_rttMax")
                        .HasColumnType("smallint");

                    b.Property<short?>("ForceG3PingRttMin")
                        .HasColumnName("Force_G3_Ping_rttMin")
                        .HasColumnType("smallint");

                    b.Property<byte?>("ForceG3VoiceBer")
                        .HasColumnName("Force_G3_Voice_BER")
                        .HasColumnType("tinyint");

                    b.Property<float?>("ForceG3VoiceEcio")
                        .HasColumnName("Force_G3_Voice_ECIO")
                        .HasColumnType("real");

                    b.Property<int?>("ForceG3VoiceId")
                        .HasColumnName("Force_G3_Voice_ID")
                        .HasColumnType("int");

                    b.Property<int?>("ForceG3VoiceLac")
                        .HasColumnName("Force_G3_Voice_LAC")
                        .HasColumnType("int");

                    b.Property<short?>("ForceG3VoiceMcc")
                        .HasColumnName("Force_G3_Voice_MCC")
                        .HasColumnType("smallint");

                    b.Property<byte?>("ForceG3VoiceMnc")
                        .HasColumnName("Force_G3_Voice_MNC")
                        .HasColumnType("tinyint");

                    b.Property<short?>("ForceG3VoicePsc")
                        .HasColumnName("Force_G3_Voice_PSC")
                        .HasColumnType("smallint");

                    b.Property<string>("ForceG3VoiceRfBand")
                        .HasColumnName("Force_G3_Voice_RfBand")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<short?>("ForceG3VoiceRscp")
                        .HasColumnName("Force_G3_Voice_RSCP")
                        .HasColumnType("smallint");

                    b.Property<short?>("ForceG3VoiceRssi")
                        .HasColumnName("Force_G3_Voice_RSSI")
                        .HasColumnType("smallint");

                    b.Property<short?>("ForceG3VoiceRxLev")
                        .HasColumnName("Force_G3_Voice_RxLev")
                        .HasColumnType("smallint");

                    b.Property<byte?>("ForceG3VoiceSystem")
                        .HasColumnName("Force_G3_Voice_System")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("ForceG3VoiceTxPwr")
                        .HasColumnName("Force_G3_Voice_TxPwr")
                        .HasColumnType("tinyint");

                    b.Property<short?>("ForceG3VoiceUarfcn")
                        .HasColumnName("Force_G3_Voice_UARFCN")
                        .HasColumnType("smallint");

                    b.Property<short?>("ForceG4CellId")
                        .HasColumnName("Force_G4_CellID")
                        .HasColumnType("smallint");

                    b.Property<byte?>("ForceG4Dlbw")
                        .HasColumnName("Force_G4_DLBW")
                        .HasColumnType("tinyint");

                    b.Property<short?>("ForceG4Earfcn")
                        .HasColumnName("Force_G4_EARFCN")
                        .HasColumnType("smallint");

                    b.Property<string>("ForceG4FrqBand")
                        .HasColumnName("Force_G4_FrqBand")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int?>("ForceG4Lac")
                        .HasColumnName("Force_G4_LAC")
                        .HasColumnType("int");

                    b.Property<short?>("ForceG4Mcc")
                        .HasColumnName("Force_G4_MCC")
                        .HasColumnType("smallint");

                    b.Property<byte?>("ForceG4Mnc")
                        .HasColumnName("Force_G4_MNC")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("ForceG4PingPLost")
                        .HasColumnName("Force_G4_Ping_pLost")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("ForceG4PingPRec")
                        .HasColumnName("Force_G4_Ping_pRec")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("ForceG4PingPSent")
                        .HasColumnName("Force_G4_Ping_pSent")
                        .HasColumnType("tinyint");

                    b.Property<short?>("ForceG4PingRttAvg")
                        .HasColumnName("Force_G4_Ping_rttAvg")
                        .HasColumnType("smallint");

                    b.Property<short?>("ForceG4PingRttMax")
                        .HasColumnName("Force_G4_Ping_rttMax")
                        .HasColumnType("smallint");

                    b.Property<short?>("ForceG4PingRttMin")
                        .HasColumnName("Force_G4_Ping_rttMin")
                        .HasColumnType("smallint");

                    b.Property<float?>("ForceG4Rsrp")
                        .HasColumnName("Force_G4_RSRP")
                        .HasColumnType("real");

                    b.Property<float?>("ForceG4Rsrq")
                        .HasColumnName("Force_G4_RSRQ")
                        .HasColumnType("real");

                    b.Property<float?>("ForceG4Rssi")
                        .HasColumnName("Force_G4_RSSI")
                        .HasColumnType("real");

                    b.Property<short?>("ForceG4Rssnr")
                        .HasColumnName("Force_G4_RSSNR")
                        .HasColumnType("smallint");

                    b.Property<short?>("ForceG4Sinr")
                        .HasColumnName("Force_G4_SINR")
                        .HasColumnType("smallint");

                    b.Property<byte?>("ForceG4System")
                        .HasColumnName("Force_G4_System")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("ForceG4Ulbw")
                        .HasColumnName("Force_G4_ULBW")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Gpsdop")
                        .HasColumnName("GPSDop")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("Gpsdt")
                        .HasColumnName("GPSDT")
                        .HasColumnType("datetime");

                    b.Property<bool>("Gpsvalidity")
                        .HasColumnName("GPSValidity")
                        .HasColumnType("bit");

                    b.Property<float>("InputVoltage")
                        .HasColumnType("real");

                    b.Property<float?>("Lat")
                        .HasColumnType("real");

                    b.Property<float?>("Lon")
                        .HasColumnType("real");

                    b.Property<int>("MachineId")
                        .HasColumnName("MachineID")
                        .HasColumnType("int");

                    b.Property<byte?>("NoOfSats")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Op")
                        .HasColumnType("tinyint");

                    b.Property<string>("PingDomain")
                        .HasColumnName("Ping_Domain")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte[]>("PingIp")
                        .HasColumnName("Ping_Ip")
                        .HasColumnType("varbinary(4)")
                        .HasMaxLength(4);

                    b.Property<byte?>("PingIpType")
                        .HasColumnName("Ping_IpType")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("RecvDt")
                        .HasColumnName("RecvDT")
                        .HasColumnType("datetime");

                    b.Property<float?>("Speed")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("InfoPacket");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.Iptype", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(254)")
                        .HasMaxLength(254);

                    b.HasKey("Id");

                    b.ToTable("IPType");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.LogFilePartitionType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(254)")
                        .HasMaxLength(254);

                    b.HasKey("Id");

                    b.ToTable("LogFilePartitionType");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.Machine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Identifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(N'')")
                        .HasMaxLength(50);

                    b.Property<string>("Imei1")
                        .HasColumnName("IMEI1")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Imei2")
                        .HasColumnName("IMEI2")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("InstallLocation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(200)")
                        .HasDefaultValueSql("(N'')")
                        .HasMaxLength(200);

                    b.Property<bool?>("IsConnected")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<int?>("MachineGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("MachineTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValueSql("(N'')")
                        .HasMaxLength(100);

                    b.Property<string>("SerialNo")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("SimcardNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(30)")
                        .HasDefaultValueSql("(N'')")
                        .HasMaxLength(30);

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("MachineGroupId");

                    b.HasIndex("MachineTypeId");

                    b.ToTable("Machine");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.MachineConnectionHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("CpuTemperature")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DateFromDevice")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsConnected")
                        .HasColumnType("bit");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("MachineId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MachineConnectionHistory");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.MachineGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ParrentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("ParrentId");

                    b.ToTable("MachineGroup");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.MachineLocations", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("CpuTemperature")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("getDate()");

                    b.Property<DateTime?>("DateFromDevice")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Speed")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("machineId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("machineId");

                    b.ToTable("MachineLocations");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.MachineType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("MachineType");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.MachineUssd", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("getDate()");

                    b.Property<DateTime?>("DateFromDevice")
                        .HasColumnType("DateTime");

                    b.Property<string>("Iccid")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Imei1")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Imei2")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("Machineid")
                        .HasColumnType("int");

                    b.Property<byte?>("Modem")
                        .HasColumnType("tinyint");

                    b.Property<string>("Operator")
                        .HasColumnName("operator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<byte?>("Sim")
                        .HasColumnType("tinyint");

                    b.Property<string>("SimBody")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<byte?>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("msg")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("MachineUssd");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.MachineVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CompleteDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("FileDownloadAddress")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Imei1")
                        .HasColumnName("IMEI1")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<int>("MachineId")
                        .HasColumnType("int");

                    b.Property<int?>("MachineVersionGroupId")
                        .HasColumnType("int");

                    b.Property<bool>("SendToDevice")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("MachineId");

                    b.HasIndex("MachineVersionGroupId");

                    b.ToTable("MachineVersion");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.MachineVersionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Reciever")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Sender")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("VersionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VersionId");

                    b.ToTable("MachineVersionDetail");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.MachineVersionGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CompleteDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("FileDownloadAddress")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<int>("MachineGroupId")
                        .HasColumnType("int");

                    b.Property<string>("MachineGroupTitle")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("MachineGroupId");

                    b.ToTable("MachineVersionGroup");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.MapProvider", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<bool>("IsCustom")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTransparent")
                        .HasColumnType("bit");

                    b.Property<byte>("PreparationMode")
                        .HasColumnType("tinyint");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MapProvider");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.MinSpeed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("NetworkId")
                        .HasColumnType("int");

                    b.Property<int?>("OperatorId")
                        .HasColumnType("int");

                    b.Property<int?>("ParameterId")
                        .HasColumnType("int");

                    b.Property<int?>("TestId")
                        .HasColumnType("int");

                    b.Property<double?>("Val")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("MinSpeed");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.ModificationReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("InsertDt")
                        .HasColumnName("InsertDT")
                        .HasColumnType("datetime");

                    b.Property<int>("ObjectId")
                        .HasColumnName("ObjectID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ProcessedDt")
                        .HasColumnName("ProcessedDT")
                        .HasColumnType("datetime");

                    b.Property<byte>("TableId")
                        .HasColumnName("TableID")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("ModificationReport");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.Network", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Network");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.NetworkTestResultFild", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("NetworkId")
                        .HasColumnName("NetworkID")
                        .HasColumnType("smallint");

                    b.Property<string>("TestFild")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("NetworkId");

                    b.ToTable("NetworkTestResultFild");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.Operator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Fname")
                        .HasColumnName("FName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Lname")
                        .HasColumnName("LName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Operator");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.Ottservice", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(254)")
                        .HasMaxLength(254);

                    b.HasKey("Id");

                    b.ToTable("OTTService");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.OttserviceTest", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(254)")
                        .HasMaxLength(254);

                    b.ToTable("OTTServiceTest");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.RecievedCommand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RecievedCommand");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.RepeatTimetype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("RepeatTimetype");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.RepeatType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(254)")
                        .HasMaxLength(254);

                    b.HasKey("Id");

                    b.ToTable("RepeatType");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.SignalStrength2G", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Epath")
                        .HasColumnName("EPath")
                        .HasColumnType("nvarchar(1500)")
                        .HasMaxLength(1500);

                    b.Property<double?>("Lat")
                        .HasColumnType("float");

                    b.Property<double?>("Lon")
                        .HasColumnType("float");

                    b.Property<string>("Operator")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<short?>("OperatorId")
                        .HasColumnName("OperatorID")
                        .HasColumnType("smallint");

                    b.Property<string>("SheetName")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<double?>("Val")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OperatorId")
                        .HasName("IX_OperatorID");

                    b.HasIndex("Val", "OperatorId", "Lat", "Lon")
                        .HasName("IX_OperatorId_Lat_Lon_Val");

                    b.ToTable("SignalStrength2G");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.SignalStrength3G", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Epath")
                        .HasColumnName("EPath")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<double?>("Lat")
                        .HasColumnType("float");

                    b.Property<double?>("Lon")
                        .HasColumnType("float");

                    b.Property<short?>("OperatorId")
                        .HasColumnName("OperatorID")
                        .HasColumnType("smallint");

                    b.Property<string>("SheetName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<double?>("Val")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OperatorId")
                        .HasName("IX_OperatorID");

                    b.HasIndex("Val", "Lat", "Lon")
                        .HasName("NonClusteredIndex-20190918-094819");

                    b.ToTable("SignalStrength3G");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.SyncDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Command")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PsyncId")
                        .HasColumnName("PSyncId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PsyncId");

                    b.ToTable("SyncDetail");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.SyncMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CntFileGet")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DisconnectedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Imei1")
                        .HasColumnName("IMEI1")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<bool>("IsCompeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MachineId")
                        .HasColumnType("int");

                    b.Property<byte?>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("SyncMaster");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.TestData", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(254)")
                        .HasMaxLength(254);

                    b.HasKey("Id");

                    b.ToTable("TestData");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.TestDataType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(254)")
                        .HasMaxLength(254);

                    b.HasKey("Id");

                    b.ToTable("TestDataType");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.TestResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActiveSetNumber")
                        .HasColumnType("int");

                    b.Property<int?>("Arfcn")
                        .HasColumnName("ARFCN")
                        .HasColumnType("int");

                    b.Property<double?>("AvgRtt")
                        .HasColumnType("float");

                    b.Property<double?>("AvrgSpeed")
                        .HasColumnType("float");

                    b.Property<DateTime?>("BeginDateTest")
                        .HasColumnType("datetime");

                    b.Property<int?>("Ber")
                        .HasColumnName("BER")
                        .HasColumnType("int");

                    b.Property<int?>("Bsic")
                        .HasColumnName("BSIC")
                        .HasColumnType("int");

                    b.Property<int?>("Cid")
                        .HasColumnName("CID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreateDateFa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DefinedTestId")
                        .HasColumnType("int");

                    b.Property<string>("DefinedTestName")
                        .HasColumnType("nvarchar(254)")
                        .HasMaxLength(254);

                    b.Property<double?>("Delay")
                        .HasColumnType("float");

                    b.Property<int?>("Dlbw")
                        .HasColumnName("DLBW")
                        .HasColumnType("int");

                    b.Property<int?>("Earfcn")
                        .HasColumnName("EARFCN")
                        .HasColumnType("int");

                    b.Property<double?>("Ecio")
                        .HasColumnName("ECIO")
                        .HasColumnType("float");

                    b.Property<double?>("ElapsedTime")
                        .HasColumnType("float");

                    b.Property<DateTime?>("EndDateTest")
                        .HasColumnType("datetime");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("FileSize")
                        .HasColumnType("int");

                    b.Property<string>("FregBand")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Hop1")
                        .HasColumnName("hop1")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Hop10")
                        .HasColumnName("hop10")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<double?>("Hop10Rtt")
                        .HasColumnName("hop10_rtt")
                        .HasColumnType("float");

                    b.Property<double?>("Hop1Rtt")
                        .HasColumnName("hop1_rtt")
                        .HasColumnType("float");

                    b.Property<string>("Hop2")
                        .HasColumnName("hop2")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<double?>("Hop2Rtt")
                        .HasColumnName("hop2_rtt")
                        .HasColumnType("float");

                    b.Property<string>("Hop3")
                        .HasColumnName("hop3")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<double?>("Hop3Rtt")
                        .HasColumnName("hop3_rtt")
                        .HasColumnType("float");

                    b.Property<string>("Hop4")
                        .HasColumnName("hop4")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<double?>("Hop4Rtt")
                        .HasColumnName("hop4_rtt")
                        .HasColumnType("float");

                    b.Property<string>("Hop5")
                        .HasColumnName("hop5")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<double?>("Hop5Rtt")
                        .HasColumnName("hop5_rtt")
                        .HasColumnType("float");

                    b.Property<string>("Hop6")
                        .HasColumnName("hop6")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<double?>("Hop6Rtt")
                        .HasColumnName("hop6_rtt")
                        .HasColumnType("float");

                    b.Property<string>("Hop7")
                        .HasColumnName("hop7")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<double?>("Hop7Rtt")
                        .HasColumnName("hop7_rtt")
                        .HasColumnType("float");

                    b.Property<string>("Hop8")
                        .HasColumnName("hop8")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<double?>("Hop8Rtt")
                        .HasColumnName("hop8_rtt")
                        .HasColumnType("float");

                    b.Property<string>("Hop9")
                        .HasColumnName("hop9")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<double?>("Hop9Rtt")
                        .HasColumnName("hop9_rtt")
                        .HasColumnType("float");

                    b.Property<bool?>("IsGroup")
                        .HasColumnType("bit");

                    b.Property<int?>("Lac")
                        .HasColumnName("LAC")
                        .HasColumnType("int");

                    b.Property<double?>("Lat")
                        .HasColumnType("float");

                    b.Property<string>("Layer3Messages")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Long")
                        .HasColumnType("float");

                    b.Property<int?>("MachineId")
                        .HasColumnType("int");

                    b.Property<string>("MachineName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<double?>("MaxRtt")
                        .HasColumnType("float");

                    b.Property<int?>("Mcc")
                        .HasColumnName("MCC")
                        .HasColumnType("int");

                    b.Property<double?>("Mdev")
                        .HasColumnType("float");

                    b.Property<double?>("MinRtt")
                        .HasColumnType("float");

                    b.Property<int?>("Mnc")
                        .HasColumnName("MNC")
                        .HasColumnType("int");

                    b.Property<int?>("NumOfPacketLost")
                        .HasColumnType("int");

                    b.Property<int?>("NumOfPacketReceived")
                        .HasColumnType("int");

                    b.Property<int?>("NumOfPacketSent")
                        .HasColumnType("int");

                    b.Property<string>("Operator")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<int?>("Ovfsf")
                        .HasColumnName("OVFSF")
                        .HasColumnType("int");

                    b.Property<int?>("Pci")
                        .HasColumnName("PCI")
                        .HasColumnType("int");

                    b.Property<int?>("Pid")
                        .HasColumnName("PID")
                        .HasColumnType("int");

                    b.Property<string>("Ping")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Psc")
                        .HasColumnName("PSC")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<double?>("Rscp")
                        .HasColumnName("RSCP")
                        .HasColumnType("float");

                    b.Property<double?>("Rsrp")
                        .HasColumnName("RSRP")
                        .HasColumnType("float");

                    b.Property<double?>("Rsrq")
                        .HasColumnName("RSRQ")
                        .HasColumnType("float");

                    b.Property<double?>("Rssi")
                        .HasColumnName("RSSI")
                        .HasColumnType("float");

                    b.Property<int?>("Rssnr")
                        .HasColumnName("RSSNR")
                        .HasColumnType("int");

                    b.Property<double?>("Rtt")
                        .HasColumnType("float");

                    b.Property<double?>("Rxlevel")
                        .HasColumnName("RXLevel")
                        .HasColumnType("float");

                    b.Property<int?>("Rxqual")
                        .HasColumnName("RXQual")
                        .HasColumnType("int");

                    b.Property<short?>("SelectedSim")
                        .HasColumnType("smallint");

                    b.Property<double?>("Speed")
                        .HasColumnType("float");

                    b.Property<int?>("Ssc")
                        .HasColumnName("SSC")
                        .HasColumnType("int");

                    b.Property<int?>("SystemMode")
                        .HasColumnType("int");

                    b.Property<int?>("Ta")
                        .HasColumnName("TA")
                        .HasColumnType("int");

                    b.Property<int?>("Tac")
                        .HasColumnName("TAC")
                        .HasColumnType("int");

                    b.Property<int?>("TestId")
                        .HasColumnType("int");

                    b.Property<double?>("Throughput")
                        .HasColumnType("float");

                    b.Property<string>("TraceRoute")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Txpower")
                        .HasColumnName("TXPower")
                        .HasColumnType("int");

                    b.Property<int?>("Uarfcn")
                        .HasColumnName("UARFCN")
                        .HasColumnType("int");

                    b.Property<int?>("Ulbw")
                        .HasColumnName("ULBW")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BeginDateTest")
                        .HasName("IX_BeginDateTest");

                    b.HasIndex("DefinedTestId")
                        .HasName("IX_DefinedTestId");

                    b.HasIndex("EndDateTest")
                        .HasName("IX_EndDateTest");

                    b.HasIndex("MachineId")
                        .HasName("IX_MachineId");

                    b.HasIndex("SelectedSim")
                        .HasName("IX_SelectedSim");

                    b.ToTable("TestResult");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.TestType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("TestType");
                });

            

            modelBuilder.Entity("ActiveProbe.Domain.Models.ZoneKml", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("KmlFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ZoneId");

                    b.ToTable("ZoneKml");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.ZonePoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<double>("Lon")
                        .HasColumnType("float");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ZoneId")
                        .HasName("IX_ZonePoint");

                    b.ToTable("ZonePoint");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.Zones", b =>
                {
                    b.Property<int>("ZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("ZoneId")
                        .HasName("PK_Zones_1");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Identity.RoleClaim", b =>
                {
                    b.HasOne("ActiveProbe.Domain.Identity.Role", "Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ActiveProbe.Domain.Identity.UserClaim", b =>
                {
                    b.HasOne("ActiveProbe.Domain.Identity.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ActiveProbe.Domain.Identity.UserLogin", b =>
                {
                    b.HasOne("ActiveProbe.Domain.Identity.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ActiveProbe.Domain.Identity.UserRole", b =>
                {
                    b.HasOne("ActiveProbe.Domain.Identity.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ActiveProbe.Domain.Identity.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ActiveProbe.Domain.Identity.UserToken", b =>
                {
                    b.HasOne("ActiveProbe.Domain.Identity.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

        

            modelBuilder.Entity("ActiveProbe.Domain.Models.Command", b =>
                {
                    b.HasOne("ActiveProbe.Domain.Models.Machine", "Machine")
                        .WithMany("Command")
                        .HasForeignKey("MachineId")
                        .HasConstraintName("FK_Command_MachineID_ProbeMachine_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.CommandOnMedia", b =>
                {
                    b.HasOne("ActiveProbe.Domain.Models.Command", "Command")
                        .WithMany("CommandOnMedia")
                        .HasForeignKey("CommandId")
                        .HasConstraintName("FK_CommandOnMedia_CommandID_Command_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.DefinedTest", b =>
                {
                    b.HasOne("ActiveProbe.Domain.Models.TestType", "TestType")
                        .WithMany("DefinedTest")
                        .HasForeignKey("TestTypeId")
                        .HasConstraintName("FK_DefinedTest_TestType")
                        .IsRequired();
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.DefinedTestMachine", b =>
                {
                    b.HasOne("ActiveProbe.Domain.Models.DefinedTest", "DefinedTest")
                        .WithMany("DefinedTestMachine")
                        .HasForeignKey("DefinedTestId")
                        .HasConstraintName("FK_DefinedTestMachine_DefinedTest")
                        .IsRequired();

                    b.HasOne("ActiveProbe.Domain.Models.Machine", "Machine")
                        .WithMany("DefinedTestMachine")
                        .HasForeignKey("MachineId")
                        .HasConstraintName("FK_DefinedTestMachine_Machine")
                        .IsRequired();

                    b.HasOne("ActiveProbe.Domain.Models.DefinedTestMachineGroup", "TestGroup")
                        .WithMany("DefinedTestMachine")
                        .HasForeignKey("TestGroupId")
                        .HasConstraintName("FK_DefinedTestMachine_DefinedTestMachineGroup");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.DefinedTestMachineGroup", b =>
                {
                    b.HasOne("ActiveProbe.Domain.Models.DefinedTest", "DefinedTest")
                        .WithMany("DefinedTestMachineGroup")
                        .HasForeignKey("DefinedTestId")
                        .HasConstraintName("FK_DefinedTestMachineGroup_DefinedTest");

                    b.HasOne("ActiveProbe.Domain.Models.MachineGroup", "MachineGroup")
                        .WithMany("DefinedTestMachineGroup")
                        .HasForeignKey("MachineGroupId")
                        .HasConstraintName("FK_DefinedTestMachineGroup_MachineGroup");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.Machine", b =>
                {
                    b.HasOne("ActiveProbe.Domain.Models.MachineGroup", "MachineGroup")
                        .WithMany("Machine")
                        .HasForeignKey("MachineGroupId")
                        .HasConstraintName("fk_MachineGroupId_Id");

                    b.HasOne("ActiveProbe.Domain.Models.MachineType", "MachineType")
                        .WithMany("Machine")
                        .HasForeignKey("MachineTypeId")
                        .HasConstraintName("FK_ProbeMachine_MachineType");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.MachineGroup", b =>
                {
                    b.HasOne("ActiveProbe.Domain.Models.MachineGroup", "Parrent")
                        .WithMany("InverseParrent")
                        .HasForeignKey("ParrentId")
                        .HasConstraintName("FK_ParrentId_Id");
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.MachineLocations", b =>
                {
                    b.HasOne("ActiveProbe.Domain.Models.Machine", "Machine")
                        .WithMany("MachineLocations")
                        .HasForeignKey("machineId")
                        .HasConstraintName("FK_MachineLocations_Machine")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.MachineVersion", b =>
                {
                    b.HasOne("ActiveProbe.Domain.Models.Machine", "Machine")
                        .WithMany("MachineVersion")
                        .HasForeignKey("MachineId")
                        .HasConstraintName("FK_MachineVersion_Machine1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ActiveProbe.Domain.Models.MachineVersionGroup", "MachineVersionGroup")
                        .WithMany("MachineVersion")
                        .HasForeignKey("MachineVersionGroupId")
                        .HasConstraintName("FK_MachineVersion_MachineVersionGroup")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.MachineVersionDetail", b =>
                {
                    b.HasOne("ActiveProbe.Domain.Models.MachineVersion", "Version")
                        .WithMany("MachineVersionDetail")
                        .HasForeignKey("VersionId")
                        .HasConstraintName("FK_MachineVersionDetail_MachineVersion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.MachineVersionGroup", b =>
                {
                    b.HasOne("ActiveProbe.Domain.Models.MachineGroup", "MachineGroup")
                        .WithMany("MachineVersionGroup")
                        .HasForeignKey("MachineGroupId")
                        .HasConstraintName("FK_MachineVersionGroup_MachineGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.NetworkTestResultFild", b =>
                {
                    b.HasOne("ActiveProbe.Domain.Models.Network", "Network")
                        .WithMany("NetworkTestResultFild")
                        .HasForeignKey("NetworkId")
                        .HasConstraintName("FK_NetworkTestResultFild_Network")
                        .IsRequired();
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.SyncDetail", b =>
                {
                    b.HasOne("ActiveProbe.Domain.Models.SyncMaster", "Psync")
                        .WithMany("SyncDetail")
                        .HasForeignKey("PsyncId")
                        .HasConstraintName("FK_SyncDetail_SyncMaster")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.ZoneKml", b =>
                {
                    b.HasOne("ActiveProbe.Domain.Models.Zones", "Zone")
                        .WithMany("ZoneKml")
                        .HasForeignKey("ZoneId")
                        .HasConstraintName("FK_ZoneKml_Zones")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ActiveProbe.Domain.Models.ZonePoint", b =>
                {
                    b.HasOne("ActiveProbe.Domain.Models.Zones", "Zone")
                        .WithMany("ZonePoint")
                        .HasForeignKey("ZoneId")
                        .HasConstraintName("FK_ZonePoint_Zones")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
